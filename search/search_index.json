{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to spatialtsp","text":"<p>A python package demo for spatially informed TSP</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://whkim15.github.io/spatialtsp</li> </ul>"},{"location":"#background","title":"Background","text":""},{"location":"#traveling-salesman-problemtsp","title":"Traveling Salesman Problem(TSP)","text":"<ul> <li>The Traveling Salesman Problem(TSP) is the problem of finding a minimum cost complete tour of a set of cities without sub-tour. </li> </ul>"},{"location":"#challenge-in-the-traveling-salesman-problem-tsp","title":"Challenge in the Traveling Salesman Problem (TSP)","text":"<ul> <li>TSP is a cornerstone challenge in Location Science, known as NP-Hard. </li> <li>It means that 'Finding an optimized route is theoretically possible but computationally intensive and impractical for large datasets.' </li> <li>Traditional approaches largely rely on heuristic methods to provide feasible solutions within a reasonable time frame. </li> <li>However, the \u2018heuristic approach\u2019 prioritizes computational efficiency over finding the exact solution (Genetic Algorithms, Simulated Annealing).</li> </ul>"},{"location":"#aim-of-this-package","title":"Aim of this package","text":"<ul> <li>Aims to increase computing performance while ensuring optimal solutions</li> <li>Application of the spatial partitioning informed approach. Applies Spatial Adjacency (Voronoi polygons) &amp; Proximity Searching Methods (K-NN) to define connections among nodes</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Generate distance matrix based on the spatial information</li> <li>Analyze Traveling Salesman Problem</li> </ul>"},{"location":"#demos","title":"Demos","text":"<ul> <li>Successfully worked in simulating toy data consisting of from 10 to 50 points(100 times of each toy data)</li> <li>Successfully worked in the real data(48 Capitals of USA)</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#spatialtsp.common.get_version","title":"<code>get_version()</code>","text":"<p>Returns the version of the spatialtsp package.</p> <p>str : The version of the spatialtsp package.</p> Source code in <code>spatialtsp/common.py</code> <pre><code>def get_version():\n    \"\"\" Returns the version of the spatialtsp package.\n\n    Returns:\n    str : The version of the spatialtsp package.\n    \"\"\"\n    return \"0.0.1\"\n</code></pre>"},{"location":"common/#spatialtsp.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>spatialtsp/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/whkim15/spatialtsp/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>spatialtsp could always use more documentation, whether as part of the official spatialtsp docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/whkim15/spatialtsp/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up spatialtsp for local development.</p> <ol> <li> <p>Fork the spatialtsp repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/spatialtsp.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv spatialtsp\n$ cd spatialtsp/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 spatialtsp tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/whkim15/spatialtsp/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install spatialtsp, run this command in your terminal:</p> <pre><code>pip install spatialtsp\n</code></pre> <p>This is the preferred method to install spatialtsp, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install spatialtsp from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/whkim15/spatialtsp\n</code></pre>"},{"location":"spatialtsp/","title":"spatialtsp module","text":"<p>Main module.</p>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.Map","title":"<code> Map            (Map)         </code>","text":"<p>This is the map class that inherits from ipyleaflet.Map.</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>Map</code> <p>The ipyleaflet.Map class.</p> required Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"This is the map class that inherits from ipyleaflet.Map.\n\n    Args:\n        ipyleaflet (Map): The ipyleaflet.Map class.\n    \"\"\"\n    def __init__(self, center=[20, 0], zoom=2, **kwargs):\n        \"\"\"Initialize the map.\n\n        Args:\n            center (list, optional): Set the center of the map. Defaults to [20, 0].\n            zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n        \"\"\"\n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n    def add_tile_layer(self, url, name, **kwargs):\n        \"\"\"Add tile layer\n\n        Args:\n            url (str): The address of url.\n            name (str): The name of the layer. \n        \"\"\"\n        layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n        self.add(layer)\n\n    def add_basemap(self, name):\n        \"\"\"Adds a basemap to the current map.\n\n        Args:\n            name (str or object): The name of the base map as a string or object\n        \"\"\"\n        if isinstance(name, str):\n            url = eval(f\"basemaps.{name}\").build_url()\n            self.add_tile_layer(url, name)\n        else:\n            self.add(name)\n\n\n    def add_layers_control(self, position = \"topright\"):\n        \"\"\"Adds a layers control to the map.\n\n        Args:\n            position (str, optional): The position of the layers control. Defaults to \"topright\".\n        \"\"\"\n        self.add_control(ipyleaflet.LayersControl(position=position))\n\n    def add_geojson(self, data, name=\"geojson\", **kwargs):\n        \"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str | dict): GeoJSON data as a string, a dictionary, or a URL.\n            name (str, optional): The name of the layer. Defaults to \"geojson\".\n        \"\"\"\n        import requests\n        import json\n\n        if isinstance(data, str):\n            if data.startswith('http://') or data.startswith('https://'):\n                # data is a URL\n                response = requests.get(data)\n                data = response.json()\n            else:\n                # data is a file path\n                with open(data) as f:\n                    data = json.load(f)\n\n        if \"style\" not in kwargs:\n            kwargs[\"style\"]={\"color\": \"blue\", \"weight\":1, \"fillOpacity\":0}\n\n        if\"hover_style\" not in kwargs:\n            kwargs[\"hover_style\"]={\"fillcolor\": \"blue\", \"fillOpacity\":0.8}\n\n        layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        self.add(layer)\n\n    def add_shp(self, data, name='shp', **kwargs):\n        \"\"\"Adds a shapefile to the map \n\n        Args:\n            data (str or dict): The path to the map\n            name (str, optional): The name of the shapefile. Defaults to 'shp'.\n        \"\"\"\n        import shapefile\n        import json\n\n        if isinstance(data, str):\n            with shapefile.Reader(data) as shp:\n                data = shp.__geo_interface__\n\n        self.add_geojson(data, name, **kwargs)\n\n    def add_vector(self, data, name=\"VectorLayer\", **kwargs):\n        \"\"\"Adds a vector layer to the map from any GeoPandas-supported vector data format.\n\n        Args:\n            data (str, dict, or geopandas.GeoDataFrame): The vector data. It can be a path to a file (GeoJSON, shapefile), a GeoJSON dict, or a GeoDataFrame.\n            name (str, optional): The name of the layer. Defaults to \"VectorLayer\".\n        \"\"\"\n        import geopandas as gpd\n        import json\n\n        # Check the data type\n        if isinstance(data, gpd.GeoDataFrame):\n            geojson_data = json.loads(data.to_json())\n        # if data is a string or a dictionary\n        elif isinstance(data, (str, dict)):\n            # if data is a string\n            if isinstance(data, str):\n                data = gpd.read_file(data)\n                geojson_data = json.loads(data.to_json())\n            else:  # if data is a dictionary\n                geojson_data = data\n        else:\n            raise ValueError(\"Unsupported data format\")\n\n        # Add the GeoJSON data to the map\n        self.add_geojson(geojson_data, name, **kwargs)\n\n    def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n        \"\"\"Adds GUI to map. Includes basemap options under 'basemap selector'\n\n        Args:\n            position (str, optional): Position of GUI. Defaults to \"topright\".\n        \"\"\"\n\n        basemap_selector = widgets.Dropdown(\n            options=[\n                \"OpenStreetMap\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"Esri.NatGeoWorldMap\",\n                \"CartoDB.DarkMatter\"\n            ],\n            description=\"Basemap\",\n        )\n\n        def update_basemap(change):\n            self.add_basemap(change[\"new\"])\n\n        basemap_selector.observe(update_basemap, \"value\")\n\n        control = ipyleaflet.WidgetControl(widget=basemap_selector, position=position)\n        self.add(control)\n\n\n    def add_image(self, url, bounds, name=\"image\", **kwargs):\n        \"\"\"Adds an image overlay to the map.\n\n        Args:\n            url (str): The URL of the image.\n            bounds (list): The bounds of the image.\n            name (str, optional): The name of the layer. Defaults to \"image\".\n        \"\"\"\n        layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n        self.add(layer)\n\n    def add_opacity_slider(\n        self, layer_index=-1, description=\"Opacity\", position=\"topright\"\n    ):\n        \"\"\"Adds an opacity slider to the map.\n\n        Args:\n            layer (object): The layer to which the opacity slider is added.\n            description (str, optional): The description of the opacity slider. Defaults to \"Opacity\".\n            position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n        \"\"\"\n        layer = self.layers[layer_index]\n        opacity_slider = widgets.FloatSlider(\n            description=description,\n            min=0,\n            max=1,\n            value=layer.opacity,\n            style={\"description_width\": \"initial\"},\n        )\n\n        def update_opacity(change):\n            layer.opacity = change[\"new\"]\n\n        opacity_slider.observe(update_opacity, \"value\")\n\n        control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n        self.add(control)\n\n\n    def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n        \"\"\"Adds a raster layer to the map.\n\n        Args:\n            data (str): The path to the raster file.\n            name (str, optional): The name of the layer. Defaults to \"raster\".\n        \"\"\"\n\n        try:\n            from localtileserver import TileClient, get_leaflet_tile_layer\n        except ImportError:\n            raise ImportError(\"Please install the localtileserver package.\")\n\n        client = TileClient(data)\n        layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n        self.add(layer)\n\n        if zoom_to_layer:\n            self.center = client.center()\n            self.zoom = client.default_zoom\n\n    def add_widget(self, widget, position=\"topright\"):\n        \"\"\"Adds a widget to the map.\n\n        Args:\n            widget (object): The widget to be added.\n            position (str, optional): The position of the widget. Defaults to \"topright\".\n        \"\"\"\n        control = ipyleaflet.WidgetControl(widget=widget, position=position)\n        self.add(control)\n\n    def add_zoom_slider(\n        self, description=\"Zoom level\", min=0, max=24, value=10, position=\"topright\"\n    ):\n        \"\"\"Adds a zoom slider to the map.\n\n        Args:\n            position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n        \"\"\"\n        zoom_slider = widgets.IntSlider(\n            description=description, min=min, max=max, value=value\n        )\n\n        control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n        self.add(control)\n        widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n\n    def add_toolbar(self, position=\"topright\"): #add toolbar functionality, basemap gui button, how keep toolbar from disappearing, remove basemap widget\n        \"\"\"Adds a toolbar to the map.\n\n        Args:\n            position (str, optional): The position of the toolbar. Defaults to \"topright\".\n        \"\"\"\n\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n\n        toolbar = widgets.VBox([toolbar_button])\n\n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n\n        close_button.observe(close_click, \"value\")\n\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(\n            rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n        )\n\n        icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(\n                    description=\"\",\n                    button_style=\"primary\",\n                    icon=icons[i * rows + j],\n                    layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n                )\n\n\n        #click signal to backend/frontend\n        def on_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(on_click, \"value\")\n        toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n        self.add(toolbar_ctrl)\n\n        #output widget confirming button click\n        output = widgets.Output()\n        output_control = WidgetControl(widget=output, position=\"bottomright\")\n        self.add(output_control)\n\n\n\n\n\n        def toolbar_callback(change): #links to actions to buttons,\n            if change.icon == \"folder-open\":\n                with output:\n                    output.clear_output()\n                    print(f\"You can open a file\")\n            elif change.icon == \"map\":\n                self.add_basemap_gui() #call basemap selector\n                with output:           #how to clear?\n                    # close_button.on_click(close_click)\n                    output.clear_output()\n                    print(\"change the basemap\")\n            elif change.icon == \"info\":\n                with output:\n                    output.clear_output()\n                    print(\"There is no info here.\")\n            elif change.icon == \"question\":\n                with output:\n                    output.clear_output()\n                    print(\"There is no help here.\")\n            else:\n                with output:\n                    output.clear_output()\n                    print(f\"Icon: {change.icon}\")\n\n        for tool in grid.children:\n            tool.on_click(toolbar_callback)\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Set the center of the map. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>Set the zoom level of the map. Defaults to 2.</p> <code>2</code> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, **kwargs):\n    \"\"\"Initialize the map.\n\n    Args:\n        center (list, optional): Set the center of the map. Defaults to [20, 0].\n        zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n    \"\"\"\n    super().__init__(center=center, zoom=zoom, **kwargs)\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.Map.add_basemap","title":"<code>add_basemap(self, name)</code>","text":"<p>Adds a basemap to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str or object</code> <p>The name of the base map as a string or object</p> required Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def add_basemap(self, name):\n    \"\"\"Adds a basemap to the current map.\n\n    Args:\n        name (str or object): The name of the base map as a string or object\n    \"\"\"\n    if isinstance(name, str):\n        url = eval(f\"basemaps.{name}\").build_url()\n        self.add_tile_layer(url, name)\n    else:\n        self.add(name)\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.Map.add_basemap_gui","title":"<code>add_basemap_gui(self, basemaps=None, position='topright')</code>","text":"<p>Adds GUI to map. Includes basemap options under 'basemap selector'</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>Position of GUI. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n    \"\"\"Adds GUI to map. Includes basemap options under 'basemap selector'\n\n    Args:\n        position (str, optional): Position of GUI. Defaults to \"topright\".\n    \"\"\"\n\n    basemap_selector = widgets.Dropdown(\n        options=[\n            \"OpenStreetMap\",\n            \"OpenTopoMap\",\n            \"Esri.WorldImagery\",\n            \"Esri.NatGeoWorldMap\",\n            \"CartoDB.DarkMatter\"\n        ],\n        description=\"Basemap\",\n    )\n\n    def update_basemap(change):\n        self.add_basemap(change[\"new\"])\n\n    basemap_selector.observe(update_basemap, \"value\")\n\n    control = ipyleaflet.WidgetControl(widget=basemap_selector, position=position)\n    self.add(control)\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.Map.add_geojson","title":"<code>add_geojson(self, data, name='geojson', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | dict</code> <p>GeoJSON data as a string, a dictionary, or a URL.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"geojson\".</p> <code>'geojson'</code> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def add_geojson(self, data, name=\"geojson\", **kwargs):\n    \"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str | dict): GeoJSON data as a string, a dictionary, or a URL.\n        name (str, optional): The name of the layer. Defaults to \"geojson\".\n    \"\"\"\n    import requests\n    import json\n\n    if isinstance(data, str):\n        if data.startswith('http://') or data.startswith('https://'):\n            # data is a URL\n            response = requests.get(data)\n            data = response.json()\n        else:\n            # data is a file path\n            with open(data) as f:\n                data = json.load(f)\n\n    if \"style\" not in kwargs:\n        kwargs[\"style\"]={\"color\": \"blue\", \"weight\":1, \"fillOpacity\":0}\n\n    if\"hover_style\" not in kwargs:\n        kwargs[\"hover_style\"]={\"fillcolor\": \"blue\", \"fillOpacity\":0.8}\n\n    layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.Map.add_image","title":"<code>add_image(self, url, bounds, name='image', **kwargs)</code>","text":"<p>Adds an image overlay to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the image.</p> required <code>bounds</code> <code>list</code> <p>The bounds of the image.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"image\".</p> <code>'image'</code> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def add_image(self, url, bounds, name=\"image\", **kwargs):\n    \"\"\"Adds an image overlay to the map.\n\n    Args:\n        url (str): The URL of the image.\n        bounds (list): The bounds of the image.\n        name (str, optional): The name of the layer. Defaults to \"image\".\n    \"\"\"\n    layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the layers control. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def add_layers_control(self, position = \"topright\"):\n    \"\"\"Adds a layers control to the map.\n\n    Args:\n        position (str, optional): The position of the layers control. Defaults to \"topright\".\n    \"\"\"\n    self.add_control(ipyleaflet.LayersControl(position=position))\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.Map.add_opacity_slider","title":"<code>add_opacity_slider(self, layer_index=-1, description='Opacity', position='topright')</code>","text":"<p>Adds an opacity slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>object</code> <p>The layer to which the opacity slider is added.</p> required <code>description</code> <code>str</code> <p>The description of the opacity slider. Defaults to \"Opacity\".</p> <code>'Opacity'</code> <code>position</code> <code>str</code> <p>The position of the opacity slider. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def add_opacity_slider(\n    self, layer_index=-1, description=\"Opacity\", position=\"topright\"\n):\n    \"\"\"Adds an opacity slider to the map.\n\n    Args:\n        layer (object): The layer to which the opacity slider is added.\n        description (str, optional): The description of the opacity slider. Defaults to \"Opacity\".\n        position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n    \"\"\"\n    layer = self.layers[layer_index]\n    opacity_slider = widgets.FloatSlider(\n        description=description,\n        min=0,\n        max=1,\n        value=layer.opacity,\n        style={\"description_width\": \"initial\"},\n    )\n\n    def update_opacity(change):\n        layer.opacity = change[\"new\"]\n\n    opacity_slider.observe(update_opacity, \"value\")\n\n    control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n    self.add(control)\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.Map.add_raster","title":"<code>add_raster(self, data, name='raster', zoom_to_layer=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the raster file.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"raster\".</p> <code>'raster'</code> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n    \"\"\"Adds a raster layer to the map.\n\n    Args:\n        data (str): The path to the raster file.\n        name (str, optional): The name of the layer. Defaults to \"raster\".\n    \"\"\"\n\n    try:\n        from localtileserver import TileClient, get_leaflet_tile_layer\n    except ImportError:\n        raise ImportError(\"Please install the localtileserver package.\")\n\n    client = TileClient(data)\n    layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n    self.add(layer)\n\n    if zoom_to_layer:\n        self.center = client.center()\n        self.zoom = client.default_zoom\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.Map.add_shp","title":"<code>add_shp(self, data, name='shp', **kwargs)</code>","text":"<p>Adds a shapefile to the map </p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The path to the map</p> required <code>name</code> <code>str</code> <p>The name of the shapefile. Defaults to 'shp'.</p> <code>'shp'</code> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def add_shp(self, data, name='shp', **kwargs):\n    \"\"\"Adds a shapefile to the map \n\n    Args:\n        data (str or dict): The path to the map\n        name (str, optional): The name of the shapefile. Defaults to 'shp'.\n    \"\"\"\n    import shapefile\n    import json\n\n    if isinstance(data, str):\n        with shapefile.Reader(data) as shp:\n            data = shp.__geo_interface__\n\n    self.add_geojson(data, name, **kwargs)\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, **kwargs)</code>","text":"<p>Add tile layer</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The address of url.</p> required <code>name</code> <code>str</code> <p>The name of the layer. </p> required Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def add_tile_layer(self, url, name, **kwargs):\n    \"\"\"Add tile layer\n\n    Args:\n        url (str): The address of url.\n        name (str): The name of the layer. \n    \"\"\"\n    layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.Map.add_toolbar","title":"<code>add_toolbar(self, position='topright')</code>","text":"<p>Adds a toolbar to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the toolbar. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def add_toolbar(self, position=\"topright\"): #add toolbar functionality, basemap gui button, how keep toolbar from disappearing, remove basemap widget\n    \"\"\"Adds a toolbar to the map.\n\n    Args:\n        position (str, optional): The position of the toolbar. Defaults to \"topright\".\n    \"\"\"\n\n    padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n    toolbar_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Toolbar\",\n        icon=\"wrench\",\n        layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n    )\n\n    close_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Close the tool\",\n        icon=\"times\",\n        button_style=\"primary\",\n        layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n    )\n\n    toolbar = widgets.VBox([toolbar_button])\n\n\n    def close_click(change):\n        if change[\"new\"]:\n            toolbar_button.close()\n            close_button.close()\n            toolbar.close()\n\n    close_button.observe(close_click, \"value\")\n\n    rows = 2\n    cols = 2\n    grid = widgets.GridspecLayout(\n        rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n    )\n\n    icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n    for i in range(rows):\n        for j in range(cols):\n            grid[i, j] = widgets.Button(\n                description=\"\",\n                button_style=\"primary\",\n                icon=icons[i * rows + j],\n                layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n            )\n\n\n    #click signal to backend/frontend\n    def on_click(change):\n        if change[\"new\"]:\n            toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n        else:\n            toolbar.children = [toolbar_button]\n\n    toolbar_button.observe(on_click, \"value\")\n    toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n    self.add(toolbar_ctrl)\n\n    #output widget confirming button click\n    output = widgets.Output()\n    output_control = WidgetControl(widget=output, position=\"bottomright\")\n    self.add(output_control)\n\n\n\n\n\n    def toolbar_callback(change): #links to actions to buttons,\n        if change.icon == \"folder-open\":\n            with output:\n                output.clear_output()\n                print(f\"You can open a file\")\n        elif change.icon == \"map\":\n            self.add_basemap_gui() #call basemap selector\n            with output:           #how to clear?\n                # close_button.on_click(close_click)\n                output.clear_output()\n                print(\"change the basemap\")\n        elif change.icon == \"info\":\n            with output:\n                output.clear_output()\n                print(\"There is no info here.\")\n        elif change.icon == \"question\":\n            with output:\n                output.clear_output()\n                print(\"There is no help here.\")\n        else:\n            with output:\n                output.clear_output()\n                print(f\"Icon: {change.icon}\")\n\n    for tool in grid.children:\n        tool.on_click(toolbar_callback)\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.Map.add_vector","title":"<code>add_vector(self, data, name='VectorLayer', **kwargs)</code>","text":"<p>Adds a vector layer to the map from any GeoPandas-supported vector data format.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, dict, or geopandas.GeoDataFrame</code> <p>The vector data. It can be a path to a file (GeoJSON, shapefile), a GeoJSON dict, or a GeoDataFrame.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"VectorLayer\".</p> <code>'VectorLayer'</code> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def add_vector(self, data, name=\"VectorLayer\", **kwargs):\n    \"\"\"Adds a vector layer to the map from any GeoPandas-supported vector data format.\n\n    Args:\n        data (str, dict, or geopandas.GeoDataFrame): The vector data. It can be a path to a file (GeoJSON, shapefile), a GeoJSON dict, or a GeoDataFrame.\n        name (str, optional): The name of the layer. Defaults to \"VectorLayer\".\n    \"\"\"\n    import geopandas as gpd\n    import json\n\n    # Check the data type\n    if isinstance(data, gpd.GeoDataFrame):\n        geojson_data = json.loads(data.to_json())\n    # if data is a string or a dictionary\n    elif isinstance(data, (str, dict)):\n        # if data is a string\n        if isinstance(data, str):\n            data = gpd.read_file(data)\n            geojson_data = json.loads(data.to_json())\n        else:  # if data is a dictionary\n            geojson_data = data\n    else:\n        raise ValueError(\"Unsupported data format\")\n\n    # Add the GeoJSON data to the map\n    self.add_geojson(geojson_data, name, **kwargs)\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.Map.add_widget","title":"<code>add_widget(self, widget, position='topright')</code>","text":"<p>Adds a widget to the map.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>object</code> <p>The widget to be added.</p> required <code>position</code> <code>str</code> <p>The position of the widget. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def add_widget(self, widget, position=\"topright\"):\n    \"\"\"Adds a widget to the map.\n\n    Args:\n        widget (object): The widget to be added.\n        position (str, optional): The position of the widget. Defaults to \"topright\".\n    \"\"\"\n    control = ipyleaflet.WidgetControl(widget=widget, position=position)\n    self.add(control)\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.Map.add_zoom_slider","title":"<code>add_zoom_slider(self, description='Zoom level', min=0, max=24, value=10, position='topright')</code>","text":"<p>Adds a zoom slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the zoom slider. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def add_zoom_slider(\n    self, description=\"Zoom level\", min=0, max=24, value=10, position=\"topright\"\n):\n    \"\"\"Adds a zoom slider to the map.\n\n    Args:\n        position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n    \"\"\"\n    zoom_slider = widgets.IntSlider(\n        description=description, min=min, max=max, value=value\n    )\n\n    control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n    self.add(control)\n    widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.calculate_distance_matrix","title":"<code>calculate_distance_matrix(gdf_points)</code>","text":"<p>Calculate the distance matrix between points.</p> <p>Parameters:</p> Name Type Description Default <code>gdf_points</code> <code>GeoDataFrame</code> <p>A GeoDataFrame containing points with x and y coordinates.</p> required <p>Returns:</p> Type Description <code>np.array</code> <p>A 2D numpy array representing the distance matrix. The distance is calculated as the Euclidean distance between points, multiplied by 100 and rounded to analyze with integer.</p> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def calculate_distance_matrix(gdf_points):\n    \"\"\"Calculate the distance matrix between points.\n\n    Args:\n        gdf_points (GeoDataFrame): A GeoDataFrame containing points with x and y coordinates.\n\n    Returns:\n        np.array: A 2D numpy array representing the distance matrix. The distance is calculated as the Euclidean distance between points, multiplied by 100 and rounded to analyze with integer.\n    \"\"\"\n    points = np.array([[point.x, point.y] for point in gdf_points.geometry])\n    num_points = len(points)\n    distance_matrix = np.zeros((num_points, num_points), dtype=int)\n    for i in range(num_points):\n        for j in range(num_points):\n            if i != j:\n                distance = np.sqrt((points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2)*100\n                distance_matrix[i, j] = round(distance)\n            else:\n                distance_matrix[i, j] = 0\n    return distance_matrix\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.combine_distance_matrices","title":"<code>combine_distance_matrices(knn_distances, voronoi_distances)</code>","text":"<p>Combines the distance matrices from a K-Nearest Neighbors model and a Voronoi diagram into a single distance matrix.</p> <p>Parameters:</p> Name Type Description Default <code>knn_distances</code> <code>numpy.ndarray</code> <p>the distance matrix from a K-Nearest Neighbors model.</p> required <code>voronoi_distances</code> <code>numpy.ndarray</code> <p>the distance matrix from a Voronoi diagram.</p> required <p>Returns:</p> Type Description <code>numpy.ndarray</code> <p>Combined distance matrix.</p> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def combine_distance_matrices(knn_distances, voronoi_distances):\n    \"\"\"\n    Combines the distance matrices from a K-Nearest Neighbors model and a Voronoi diagram into a single distance matrix.\n\n    Args:\n        knn_distances (numpy.ndarray): the distance matrix from a K-Nearest Neighbors model.\n        voronoi_distances (numpy.ndarray): the distance matrix from a Voronoi diagram.\n\n    Returns:\n        numpy.ndarray: Combined distance matrix.\n    \"\"\"\n    # Generate a matrix to store the final distances\n    final_distances = np.full(knn_distances.shape, 99999) # initialize the distance matrix(99999; if not adjacent)\n\n    # Combine the two distance matrices\n    for i in range(final_distances.shape[0]):\n        for j in range(final_distances.shape[1]):\n            # If both distances are not 99999, take the minimum\n            if knn_distances[i][j] != 99999 and voronoi_distances[i][j] != 99999.00:\n                final_distances[i][j] = min(knn_distances[i][j], voronoi_distances[i][j])\n            elif knn_distances[i][j] != 99999:\n                final_distances[i][j] = knn_distances[i][j]\n            elif voronoi_distances[i][j] != 99999.00:\n                final_distances[i][j] = voronoi_distances[i][j]\n    return final_distances\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.generate_clustered_points","title":"<code>generate_clustered_points(num_points, std_dev=5, cluster_centers=[(13, 13), (37, 37)], x_max=50, y_max=50, min_distance=3, seed=None)</code>","text":"<p>Generate clustered points.</p> <p>Parameters:</p> Name Type Description Default <code>num_points</code> <code>int</code> <p>The number of points to generate.</p> required <code>std_dev</code> <code>int</code> <p>make std dev. Defaults to 5.</p> <code>5</code> <code>cluster_centers</code> <code>list</code> <p>The centers of the clusters. Defaults to [(13, 13), (37, 37)].</p> <code>[(13, 13), (37, 37)]</code> <code>x_max</code> <code>int</code> <p>Limitation of x value. Defaults to 50.</p> <code>50</code> <code>y_max</code> <code>int</code> <p>Limitation of y value Defaults to 50.</p> <code>50</code> <code>min_distance</code> <code>int</code> <p>The minimum distance between points. Defaults to 3.</p> <code>3</code> <code>seed</code> <code>_type_</code> <p>Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>_type_</code> <p>description</p> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def generate_clustered_points(num_points, std_dev=5, cluster_centers=[(13, 13), (37, 37)], x_max=50, y_max=50, min_distance=3, seed=None):\n    \"\"\"Generate clustered points.\n\n    Args:\n        num_points (int): The number of points to generate.\n        std_dev (int, optional): make std dev. Defaults to 5.\n        cluster_centers (list, optional): The centers of the clusters. Defaults to [(13, 13), (37, 37)].\n        x_max (int, optional): Limitation of x value. Defaults to 50.\n        y_max (int, optional): Limitation of y value Defaults to 50.\n        min_distance (int, optional): The minimum distance between points. Defaults to 3.\n        seed (_type_, optional): Defaults to None.\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    np.random.seed(seed)\n    all_points = set()\n\n    points_per_cluster = num_points // len(cluster_centers)\n    extra_points = num_points % len(cluster_centers)  #    \n\n    for index, center in enumerate(cluster_centers):\n        points = set()\n        extra = 1 if index &lt; extra_points else 0\n        while len(points) &lt; points_per_cluster + extra:\n            x = np.random.normal(center[0], std_dev)\n            y = np.random.normal(center[1], std_dev)\n            x, y = int(round(x)), int(round(y))\n            if x &gt; 1 and y &gt; 1 and x &lt;= x_max and y &lt;= y_max and is_far_enough((x, y), all_points, min_distance):\n                points.add((x, y))\n        all_points.update(points)\n\n    points_list = list(all_points)\n    gdf_points = gpd.GeoDataFrame({'geometry': [Point(p) for p in points_list]}, crs=\"EPSG:4326\")\n\n    return gdf_points\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.generate_lp_model","title":"<code>generate_lp_model(distance_matrix)</code>","text":"<p>Generate LP Model to Solve the Traveling Salesman Problem (TSP).</p> <p>Parameters:</p> Name Type Description Default <code>distance_matrix</code> <code>numpy.ndarray</code> <p>the distance between each pair of points. The entry at [i, j] is the distance from the i-th point to the j-th point.</p> required <p>Returns:</p> Type Description <code>list</code> <p>the lp models for the TSP problem.</p> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def generate_lp_model(distance_matrix):\n    \"\"\"\n    Generate LP Model to Solve the Traveling Salesman Problem (TSP).\n\n    Args:\n        distance_matrix (numpy.ndarray): the distance between each pair of points. The entry at [i, j] is the distance from the i-th point to the j-th point.\n\n    Returns:\n        list: the lp models for the TSP problem.\n    \"\"\"\n    n = len(distance_matrix)  # The number of points\n\n    # 1. Generate the objective function\n    objective_function = \"Minimize\\nobj: \"\n    variables_str = \" + \".join(f\"{distance_matrix[i][j]} X_{i+1}_{j+1}\"\n                               for i in range(n) for j in range(n) if i != j)\n    objective_function += variables_str\n\n    # 2. Generate the subject to constraints\n    subject_to = \"\\n\\nSubject To\\n\"\n    for i in range(1, n + 1):\n        subject_to += f\"Con_{i}: \" + \" + \".join(f\"X_{i}_{j}\" for j in range(1, n + 1) if j != i) + \" = 1\\n\"\n\n    for j in range(1, n + 1):\n        subject_to += f\"Con_{n + j}: \" + \" + \".join(f\"X_{i}_{j}\" for i in range(1, n + 1) if i != j) + \" = 1\\n\"\n\n    # 3. MTZ constraints(prevent subtours)\n    mtz_constraints = \"\\n\"\n    for i in range(2, n + 1):\n        for j in range(2, n + 1):\n            if i != j:\n                mtz_constraints += f\"MTZ_{i}_{j}: U_{i} - U_{j} + {n} X_{i}_{j} &lt;= {n - 1}\\n\"\n\n    # 4. Bounds\n    bounds = \"\\nBounds\\n\"\n    for i in range(2, n + 1):\n        bounds += f\"1 &lt;= U_{i} &lt;= {n-1}\\n\"\n\n    # 5. Binaries\n    binaries = \"\\nBinaries\\n\"\n    for i in range(1, n + 1):\n        binaries += \" \".join(f\"X_{i}_{j}\" for j in range(1, n + 1) if i != j) + \"\\n\"\n\n    generals = \"\\nGenerals\\n\" + \" \".join(f\"U_{i}\" for i in range(2, n + 1))\n\n    # 6. Combine all the parts\n    lp_model = objective_function + subject_to + mtz_constraints + bounds + binaries + generals + \"\\n\\nEnd\"\n    print(f\"\\* Generated LP model for {n} points.*/\")\n    return lp_model\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.generate_random_points","title":"<code>generate_random_points(num_points, num_points_per_cell=1, x_max=50, y_max=50, min_distance=1, seed=0)</code>","text":"<p>Generates a specified number of points within a grid, ensuring a minimum distance between each point.</p> <p>Parameters:</p> Name Type Description Default <code>num_points</code> <code>int</code> <p>The total number of points to generate.</p> required <code>num_points_per_cell</code> <code>int</code> <p>The maximum number of points allowed within each cell of the grid. Defaults to 1.</p> <code>1</code> <code>x_max</code> <code>int</code> <p>The maximum x-coordinate for the grid. Defaults to 50.</p> <code>50</code> <code>y_max</code> <code>int</code> <p>The maximum y-coordinate for the grid. Defaults to 50.</p> <code>50</code> <code>min_distance</code> <code>int</code> <p>The minimum allowed distance between any two points. Defaults to 1.</p> <code>1</code> <code>seed</code> <code>int</code> <p>The seed for the random number generator, for reproducibility. Defaults to 0.</p> <code>0</code> <p>Returns:</p> Type Description <code>list of tuples</code> <p>A list of (x, y) coordinates for the generated points.</p> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def generate_random_points(num_points, num_points_per_cell=1, x_max=50, y_max=50, min_distance=1, seed=0):\n    \"\"\" Generates a specified number of points within a grid, ensuring a minimum distance between each point.\n\n\n    Args:\n        num_points (int): The total number of points to generate.\n        num_points_per_cell (int, optional): The maximum number of points allowed within each cell of the grid. Defaults to 1.\n        x_max (int, optional): The maximum x-coordinate for the grid. Defaults to 50.\n        y_max (int, optional): The maximum y-coordinate for the grid. Defaults to 50.\n        min_distance (int, optional): The minimum allowed distance between any two points. Defaults to 1.\n        seed (int, optional): The seed for the random number generator, for reproducibility. Defaults to 0.\n\n    Returns:\n        list of tuples: A list of (x, y) coordinates for the generated points.\n    \"\"\"\n    np.random.seed() \n    n=num_points\n    points_list = []\n\n    # Calculate the total number of cells (n by n grid)\n    num_cells = n ** 2\n    cell_width = x_max / n\n    cell_height = y_max / n\n    points_list = []\n\n    for i in range(n):\n        for j in range(n):\n            cell_points = set()\n            while len(cell_points) &lt; num_points_per_cell:\n                x_min, x_max = i * cell_width, (i + 1) * cell_width\n                y_min, y_max = j * cell_height, (j + 1) * cell_height\n                x = np.random.uniform(x_min, x_max)\n                y = np.random.uniform(y_min, y_max)\n                new_point = (x, y)\n\n                if is_far_enough(new_point, cell_points, min_distance):\n                    cell_points.add(new_point)\n\n            points_list.extend(cell_points)\n\n    gdf_points = gpd.GeoDataFrame({'geometry': [Point(p) for p in points_list]}, crs=\"EPSG:4326\")\n    return gdf_points\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.get_attributes_cplex","title":"<code>get_attributes_cplex(result)</code>","text":"<p>Extracts various attributes from the result of a CPLEX optimization.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>str</code> <p>The result string from a CPLEX optimization.</p> required <p>Returns:</p> Type Description <code>timenb (str or None)</code> <p>The solution time in seconds, if found in the result string. iternb (str or None): The number of iterations, if found in the result string. nodenb (str or None): The number of nodes, if found in the result string. objval (float): The objective value, if found in the result string. Defaults to 0.0 if not found. dettime (str or None): The deterministic time in ticks, if found in the result string.</p> <p>Examples:</p> <p>result = \"Solution time = 10 sec. Iterations = 5 Nodes = 3 Objective = 100.0 Deterministic time = 20 ticks\" timenb, iternb, nodenb, objval, dettime = get_attributes_cplex(result)</p> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def get_attributes_cplex(result):\n    \"\"\"\n    Extracts various attributes from the result of a CPLEX optimization.\n\n    Args:\n        result (str): The result string from a CPLEX optimization.\n\n    Returns:\n        timenb (str or None): The solution time in seconds, if found in the result string.\n        iternb (str or None): The number of iterations, if found in the result string.\n        nodenb (str or None): The number of nodes, if found in the result string.\n        objval (float): The objective value, if found in the result string. Defaults to 0.0 if not found.\n        dettime (str or None): The deterministic time in ticks, if found in the result string.\n\n    Example:\n        result = \"Solution time = 10 sec. Iterations = 5 Nodes = 3 Objective = 100.0 Deterministic time = 20 ticks\"\n        timenb, iternb, nodenb, objval, dettime = get_attributes_cplex(result)\n    \"\"\"\n    # Initialize default values\n    timenb = iternb = nodenb = objval = dettime = None\n\n    # Use regular expressions to find matches\n    time_match = re.search(r'Solution time =\\s+([\\d\\.]+) sec.', result)\n    iter_match = re.search(r'Iterations = (\\d+)', result)\n    node_match = re.search(r'Nodes = (\\d+)', result)\n    objval_match = re.search(r'Objective =\\s+([\\d\\.e\\+\\-]+)', result)\n    dettime_match = re.search(r'Deterministic time =\\s+([\\d\\.]+) ticks', result)\n\n    variables = {}\n    var_pattern = re.compile(r'X_(\\d+)_(\\d+)\\s+(\\d+\\.\\d+)')\n    for line in result.split('\\n'):\n        var_match = var_pattern.search(line)\n        if var_match:\n            var_name = f\"X_{var_match.group(1)}_{var_match.group(2)}\"\n            var_value = float(var_match.group(3))\n            variables[var_name] = var_value\n\n    # Extract values if matches are found\n    if time_match:\n        timenb = time_match.group(1)\n    if iter_match:\n        iternb = iter_match.group(1)\n    if node_match:\n        nodenb = node_match.group(1)\n    if objval_match:\n        objval = objval_match.group(1)\n    if dettime_match:\n        dettime = dettime_match.group(1)\n    objval = objval if objval is not None else 0.0 \n\n    return timenb, iternb, nodenb, float(objval), dettime, variables\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.is_far_enough","title":"<code>is_far_enough(new_point, existing_points, min_distance=3)</code>","text":"<p>Check if a new point is far enough from existing points.</p> <p>Parameters:</p> Name Type Description Default <code>new_point</code> <code>any type of number data</code> <p>Make a new point</p> required <code>existing_points</code> <code>any type of number data</code> <p>For get a enough distance from existing points</p> required <code>min_distance</code> <code>int</code> <p>The minimum distance between points. Defaults to 3.</p> <code>3</code> <p>Returns:</p> Type Description <code>_type_</code> <p>description</p> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def is_far_enough(new_point, existing_points, min_distance=3):\n    \"\"\"Check if a new point is far enough from existing points.\n\n    Args:\n        new_point (any type of number data): Make a new point\n        existing_points (any type of number data): For get a enough distance from existing points\n        min_distance (int, optional): The minimum distance between points. Defaults to 3.\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    for point in existing_points:\n        if np.sqrt((new_point[0] - point[0])**2 + (new_point[1] - point[1])**2) &lt; min_distance:\n            return False\n    return True\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.knn_adjacency_distance","title":"<code>knn_adjacency_distance(gdf_points, k)</code>","text":"<p>Generate Distance Matrix based on adjacency in K-NN model</p> <p>Parameters:</p> Name Type Description Default <code>gdf_points</code> <code>GeoDataFrame</code> <p>A GeoDataFrame containing the points for which to generate the distance matrix.</p> required <code>k</code> <code>int</code> <p>The number of nearest neighbors to consider for each point.</p> required <p>Returns:</p> Type Description <code>numpy.ndarray</code> <p>A 2D array representing the distance matrix, where the entry at [i, j] is the distance from the i-th point to its j-th nearest neighbor.</p> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def knn_adjacency_distance(gdf_points, k):\n    \"\"\"\n    Generate Distance Matrix based on adjacency in K-NN model\n\n    Args:\n        gdf_points (GeoDataFrame): A GeoDataFrame containing the points for which to generate the distance matrix.\n        k (int): The number of nearest neighbors to consider for each point.\n\n    Returns:\n        numpy.ndarray: A 2D array representing the distance matrix, where the entry at [i, j] is the distance from the i-th point to its j-th nearest neighbor.\n    \"\"\"\n    # Extract point coordinates from the GeoDataFrame\n    points = np.array([[point.x, point.y] for point in gdf_points.geometry])\n\n    # Create and fit the k-nearest neighbors model\n    neigh = NearestNeighbors(n_neighbors=k)\n    neigh.fit(points)\n\n    # Find the k-nearest neighbors for each point\n    distances, indices = neigh.kneighbors(points)\n\n    # initialize the distance matrix(99999; if not adjacent)\n    distance_matrix = np.full((len(points), len(points)), 99999)\n        # Fill in the actual distances for k-nearest neighbors\n    for i in range(len(points)):\n        for j in indices[i]:\n            if i != j:  # Exclude self\n                actual_distance = np.linalg.norm(points[i] - points[j])*100\n                distance_matrix[i][j] = round(actual_distance)  # Round to 0 decimal places\n\n    # 0 for the cost of moving from a city to itself\n    np.fill_diagonal(distance_matrix, 0)\n    return distance_matrix\n</code></pre>"},{"location":"spatialtsp/#spatialtsp.spatialtsp.voronoi_adjacency_distance","title":"<code>voronoi_adjacency_distance(gdf_points, clip_box=&lt;POLYGON ((50 0, 50 50, 0 50, 0 0, 50 0))&gt;)</code>","text":"<p>Generate Distance Matrix based on adjacency in Voronoi polygon</p> <p>Parameters:</p> Name Type Description Default <code>gdf_points</code> <code>GeoDataFrame</code> <p>A GeoDataFrame containing the points to process.</p> required <code>clip_box</code> <code>shapely.geometry.Polygon</code> <p>A shapely Polygon representing the bounding box to which the points should be clipped. Defaults to a 50x50 box with its lower left corner at the origin.</p> <code>&lt;POLYGON ((50 0, 50 50, 0 50, 0 0, 50 0))&gt;</code> <p>Returns:</p> Type Description <code>GeoDataFrame</code> <p>A new GeoDataFrame containing the processed points.</p> Source code in <code>spatialtsp/spatialtsp.py</code> <pre><code>def voronoi_adjacency_distance(gdf_points, clip_box=box(0, 0, 50, 50)):\n    \"\"\"\n    Generate Distance Matrix based on adjacency in Voronoi polygon\n\n    Args:\n        gdf_points (GeoDataFrame): A GeoDataFrame containing the points to process.\n        clip_box (shapely.geometry.Polygon, optional): A shapely Polygon representing the bounding box to which the points should be clipped. Defaults to a 50x50 box with its lower left corner at the origin.\n\n    Returns:\n        GeoDataFrame: A new GeoDataFrame containing the processed points.\n    \"\"\"\n    points = np.array([[point.x, point.y] for point in gdf_points.geometry])\n    points2=points\n    points2 = np.append(points2, [[999,999], [-999,999], [999,-999], [-999,-999]], axis = 0)\n    vor = Voronoi(points2)\n    point_to_region = vor.point_region[:len(points)]\n    polygons = []\n    ids = []\n    for point_idx, region_idx in enumerate(point_to_region):\n        region = vor.regions[region_idx]\n        if -1 in region:\n            continue\n        polygon = Polygon([vor.vertices[i] for i in region])\n        clipped_polygon = polygon.intersection(clip_box)\n        if not clipped_polygon.is_empty:\n            polygons.append(clipped_polygon)\n            ids.append(point_idx)  # point index\n\n    # Generate a GeoDataFrame from the Voronoi polygons\n    voronoi_gdf = gpd.GeoDataFrame({'id': ids, 'geometry': polygons}, crs=\"EPSG:4326\")\n\n    # Investigate the adjacency of the Voronoi polygons\n    num_points = len(points)\n    distances = np.full((num_points, num_points), 99999)\n    for i in range(num_points):\n        distances[i, i] = 0\n        for j in range(num_points):\n            if i != j:\n                # find the Voronoi polygon of the two points\n                if voronoi_gdf.geometry[i].touches(voronoi_gdf.geometry[j]):\n                    # if the two polygons are adjacent, calculate the distance between the two points\n                    distance = gdf_points.geometry[i].distance(gdf_points.geometry[j])*100\n                    distances[i, j] = round(distance)    \n    return distances, voronoi_gdf\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use spatialtsp in a project:</p> <pre><code>import spatialtsp\n</code></pre>"},{"location":"utils/","title":"utils module","text":"<p>This is the module that contains utility function for the spatailtsp</p>"},{"location":"utils/#spatialtsp.utils.csv_to_df","title":"<code>csv_to_df(csv_file)</code>","text":"<p>Converts a CSV file to a pandas DataFrame.</p> <p>Args : csv_file(str) : The path to the CSV file.</p> <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>The pandas Dataframe.</p> Source code in <code>spatialtsp/utils.py</code> <pre><code>def csv_to_df(csv_file):\n    \"\"\"Converts a CSV file to a pandas DataFrame.\n\n    Args : csv_file(str) : The path to the CSV file.\n\n    Returns:\n        pandas.DataFrame: The pandas Dataframe.\n    \"\"\"\n    import pandas as pd\n\n    return pd.read_csv(csv_file)\n</code></pre>"},{"location":"class510/lab4/","title":"Lab4","text":"In\u00a0[1]: Copied! <pre>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Submitted time: {now}\")\n</pre> from datetime import datetime  now = datetime.now() print(f\"Submitted time: {now}\") <pre>Submitted time: 2024-02-27 16:57:31.448675\n</pre> In\u00a0[2]: Copied! <pre>variable = \"Hello Dr.Wu! This is Wanhee Kim. I appreciate your class\"\nprint(variable)\n</pre> variable = \"Hello Dr.Wu! This is Wanhee Kim. I appreciate your class\" print(variable) <pre>Hello Dr.Wu! This is Wanhee Kim. I appreciate your class\n</pre> In\u00a0[3]: Copied! <pre>variable_name = \"Wanhee Kim\"\n\nprint(variable_name.lower())\n\nprint(variable_name.upper())\n\nprint(variable_name.title())\n</pre> variable_name = \"Wanhee Kim\"  print(variable_name.lower())  print(variable_name.upper())  print(variable_name.title()) <pre>wanhee kim\nWANHEE KIM\nWanhee Kim\n</pre> In\u00a0[4]: Copied! <pre>famous_person = \"Waldo Tobler\"\nquote = \"Everything is related to everything else, but near things are more related than distant things.\"\n\nprint(f'{famous_person} said, \"{quote}\"')\n</pre> famous_person = \"Waldo Tobler\" quote = \"Everything is related to everything else, but near things are more related than distant things.\"  print(f'{famous_person} said, \"{quote}\"') <pre>Waldo Tobler said, \"Everything is related to everything else, but near things are more related than distant things.\"\n</pre> In\u00a0[5]: Copied! <pre>variable_name_with_whitespace = \"\\tWanhee Kim\\n\"\n\nprint(variable_name_with_whitespace)\nprint(variable_name_with_whitespace.lstrip())\nprint(variable_name_with_whitespace.rstrip())\nprint(variable_name_with_whitespace.strip())\n</pre> variable_name_with_whitespace = \"\\tWanhee Kim\\n\"  print(variable_name_with_whitespace) print(variable_name_with_whitespace.lstrip()) print(variable_name_with_whitespace.rstrip()) print(variable_name_with_whitespace.strip()) <pre>\tWanhee Kim\n\nWanhee Kim\n\n\tWanhee Kim\nWanhee Kim\n</pre> In\u00a0[6]: Copied! <pre>friends_names=[\"Changwha\", \"Max\", \"Andy\", \"Yungmin\"]\n\nfor name in friends_names:\n    print(name)\n</pre> friends_names=[\"Changwha\", \"Max\", \"Andy\", \"Yungmin\"]  for name in friends_names:     print(name) <pre>Changwha\nMax\nAndy\nYungmin\n</pre> In\u00a0[7]: Copied! <pre>transportation_modes = ['private car', 'mortocycle', 'electronic bicycle', 'scooter']\n\nfor mode in transportation_modes:\n    print(f\"I would like to own a {mode}.\")\n</pre> transportation_modes = ['private car', 'mortocycle', 'electronic bicycle', 'scooter']  for mode in transportation_modes:     print(f\"I would like to own a {mode}.\")  <pre>I would like to own a private car.\nI would like to own a mortocycle.\nI would like to own a electronic bicycle.\nI would like to own a scooter.\n</pre> In\u00a0[8]: Copied! <pre>favorite_pizzas = ['hawaiian', 'potato', 'veggies']\n\nfor pizza in favorite_pizzas:\n    print(f\"I like {pizza} pizza.\")\n</pre> favorite_pizzas = ['hawaiian', 'potato', 'veggies']  for pizza in favorite_pizzas:     print(f\"I like {pizza} pizza.\")  <pre>I like hawaiian pizza.\nI like potato pizza.\nI like veggies pizza.\n</pre> <p>Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza!</p> In\u00a0[9]: Copied! <pre>favorite_pizzas = ['hawaiian', 'potato', 'veggies']\n\nfor pizza in favorite_pizzas:\n    print(f\"I like {pizza} pizza.\")\n\nprint(\"I really love pizza!\")\n</pre> favorite_pizzas = ['hawaiian', 'potato', 'veggies']  for pizza in favorite_pizzas:     print(f\"I like {pizza} pizza.\")  print(\"I really love pizza!\") <pre>I like hawaiian pizza.\nI like potato pizza.\nI like veggies pizza.\nI really love pizza!\n</pre> In\u00a0[10]: Copied! <pre>pets = ['dog', 'cat', 'rabbit']\n\nfor pet in pets:\n    print(pet)\n\nfor pet in pets:\n    print(f\"A {pet} would make a great pet.\")\n</pre> pets = ['dog', 'cat', 'rabbit']  for pet in pets:     print(pet)  for pet in pets:     print(f\"A {pet} would make a great pet.\") <pre>dog\ncat\nrabbit\nA dog would make a great pet.\nA cat would make a great pet.\nA rabbit would make a great pet.\n</pre> <p>Add a line at the end of your program stating what these animals have in common. You could print a sentence such as Any of these animals would make a great pet!</p> In\u00a0[11]: Copied! <pre>pets = ['dog', 'cat', 'rabbit']\n\nfor pet in pets:\n    print(pet)\n\nfor pet in pets:\n    print(f\"A {pet} would make a great pet.\")\n\nprint(\"Any of these animals would make a great pet!\")\n</pre> pets = ['dog', 'cat', 'rabbit']  for pet in pets:     print(pet)  for pet in pets:     print(f\"A {pet} would make a great pet.\")  print(\"Any of these animals would make a great pet!\")  <pre>dog\ncat\nrabbit\nA dog would make a great pet.\nA cat would make a great pet.\nA rabbit would make a great pet.\nAny of these animals would make a great pet!\n</pre> In\u00a0[12]: Copied! <pre>numbers = list(range(1, 101))\n\nsum_numbers = sum(numbers)\n\nmin_number = min(numbers)\n\nmax_number = max(numbers)\n\n#print(numbers)\nprint(sum_numbers)\nprint(min_number)\nprint(max_number)\n</pre> numbers = list(range(1, 101))  sum_numbers = sum(numbers)  min_number = min(numbers)  max_number = max(numbers)  #print(numbers) print(sum_numbers) print(min_number) print(max_number)  <pre>5050\n1\n100\n</pre> In\u00a0[13]: Copied! <pre>odd_numbers = list(range(1, 21, 2))\n\nodd_numbers\n</pre> odd_numbers = list(range(1, 21, 2))  odd_numbers Out[13]: <pre>[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]</pre> In\u00a0[14]: Copied! <pre>multiples_of_three = list(range(3, 31, 3))\n\nmultiples_of_three\n</pre> multiples_of_three = list(range(3, 31, 3))  multiples_of_three Out[14]: <pre>[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]</pre> In\u00a0[15]: Copied! <pre>cubes = [x**3 for x in range(1, 11)]\ncubes\n</pre> cubes = [x**3 for x in range(1, 11)] cubes Out[15]: <pre>[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]</pre> In\u00a0[16]: Copied! <pre>cubes = [x**3 for x in range(1, 11)]\n\nprint(\"The first three items in the list are:\", cubes[:3])\n</pre> cubes = [x**3 for x in range(1, 11)]  print(\"The first three items in the list are:\", cubes[:3]) <pre>The first three items in the list are: [1, 8, 27]\n</pre> <p>Print the message Three items from the middle of the list are:. Use a slice to print three items from the middle of the list.</p> In\u00a0[17]: Copied! <pre>cubes = [x**3 for x in range(1, 11)]\n\nmiddle = len(cubes) // 2\nprint(\"Three items from the middle of the list are:\", cubes[middle-1:middle+2])\n</pre> cubes = [x**3 for x in range(1, 11)]  middle = len(cubes) // 2 print(\"Three items from the middle of the list are:\", cubes[middle-1:middle+2]) <pre>Three items from the middle of the list are: [125, 216, 343]\n</pre> <p>Print the message The last three items in the list are:. Use a slice to print the last three items in the list.</p> In\u00a0[18]: Copied! <pre>cubes = [x**3 for x in range(1, 11)]\n\nprint(\"The last three items in the list are:\", cubes[-3:])\n</pre> cubes = [x**3 for x in range(1, 11)]  print(\"The last three items in the list are:\", cubes[-3:]) <pre>The last three items in the list are: [512, 729, 1000]\n</pre> In\u00a0[19]: Copied! <pre>foods = ('sushi', 'salad', 'pizza', 'bbq', 'pasta')\nfor food in foods:\n    print(food)\n</pre> foods = ('sushi', 'salad', 'pizza', 'bbq', 'pasta') for food in foods:     print(food) <pre>sushi\nsalad\npizza\nbbq\npasta\n</pre> <p>The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu.</p> In\u00a0[20]: Copied! <pre># Original menu\nfoods = ('sushi', 'salad', 'pizza', 'bbq', 'pasta')\nprint(\"Original menu:\")\nfor food in foods:\n    print(food)\n\n# Changing the menu\nrevised_foods = ('sushi', 'salad', 'burger', 'bbq', 'chicken')\nprint(\"\\nRevised menu:\")\nfor revised_food in revised_foods:\n    print(revised_food)\n</pre> # Original menu foods = ('sushi', 'salad', 'pizza', 'bbq', 'pasta') print(\"Original menu:\") for food in foods:     print(food)  # Changing the menu revised_foods = ('sushi', 'salad', 'burger', 'bbq', 'chicken') print(\"\\nRevised menu:\") for revised_food in revised_foods:     print(revised_food) <pre>Original menu:\nsushi\nsalad\npizza\nbbq\npasta\n\nRevised menu:\nsushi\nsalad\nburger\nbbq\nchicken\n</pre> In\u00a0[21]: Copied! <pre># Pass\nalien_color = 'green'\nif alien_color == 'green':\n    print(\"You just earned 5 points!\")\n\n# Fail\nalien_color = 'red'\nif alien_color == 'green':\n    print(\"You just earned 5 points!\")\n</pre> # Pass alien_color = 'green' if alien_color == 'green':     print(\"You just earned 5 points!\")  # Fail alien_color = 'red' if alien_color == 'green':     print(\"You just earned 5 points!\")   <pre>You just earned 5 points!\n</pre> In\u00a0[22]: Copied! <pre>age = 10\n\nif age &lt; 2:\n    print(\"This person is a baby.\")\nelif age &lt; 4:\n    print(\"This person is a toddler.\")\nelif age &lt; 13:\n    print(\"This person is a kid.\")\nelif age &lt; 20:\n    print(\"This person is a teenager.\")\nelif age &lt; 65:\n    print(\"This person is an adult.\")\nelse:\n    print(\"This person is an elder.\")\n</pre> age = 10  if age &lt; 2:     print(\"This person is a baby.\") elif age &lt; 4:     print(\"This person is a toddler.\") elif age &lt; 13:     print(\"This person is a kid.\") elif age &lt; 20:     print(\"This person is a teenager.\") elif age &lt; 65:     print(\"This person is an adult.\") else:     print(\"This person is an elder.\")  <pre>This person is a kid.\n</pre> In\u00a0[23]: Copied! <pre>favorite_fruits=[\"watermelon\", \"melon\", \"banana\"]\n\nfor fruit in ['banana', 'apple', 'kiwi', 'melon', 'cherry']:\n    if fruit in favorite_fruits:\n        print(f\"You really like {fruit}!\")\n</pre> favorite_fruits=[\"watermelon\", \"melon\", \"banana\"]  for fruit in ['banana', 'apple', 'kiwi', 'melon', 'cherry']:     if fruit in favorite_fruits:         print(f\"You really like {fruit}!\") <pre>You really like banana!\nYou really like melon!\n</pre> In\u00a0[24]: Copied! <pre>usernames = ['admin', 'jaden', 'lily', 'chris', 'mike']\n\nfor username in usernames:\n    if username == 'admin':\n        print(\"Hello admin, would you like to see a status report?\")\n    else:\n        print(f\"Hello {username}, thank you for logging in again.\")\n</pre> usernames = ['admin', 'jaden', 'lily', 'chris', 'mike']  for username in usernames:     if username == 'admin':         print(\"Hello admin, would you like to see a status report?\")     else:         print(f\"Hello {username}, thank you for logging in again.\") <pre>Hello admin, would you like to see a status report?\nHello jaden, thank you for logging in again.\nHello lily, thank you for logging in again.\nHello chris, thank you for logging in again.\nHello mike, thank you for logging in again.\n</pre> In\u00a0[25]: Copied! <pre>current_users = ['admin', 'jaden', 'lily', 'chris', 'mike']\n\nnew_users = ['James', 'lily', 'ANNA', 'Chris', 'olivia']\n\n# Making a case-insensitive comparison\ncurrent_users_lower = [user.lower() for user in current_users]\n\nfor new_user in new_users:\n    if new_user.lower() in current_users_lower:\n        print(f\"Username {new_user} has been used. Please enter a new username.\")\n    else:\n        print(f\"Username {new_user} is available.\")\n</pre> current_users = ['admin', 'jaden', 'lily', 'chris', 'mike']  new_users = ['James', 'lily', 'ANNA', 'Chris', 'olivia']  # Making a case-insensitive comparison current_users_lower = [user.lower() for user in current_users]  for new_user in new_users:     if new_user.lower() in current_users_lower:         print(f\"Username {new_user} has been used. Please enter a new username.\")     else:         print(f\"Username {new_user} is available.\")  <pre>Username James is available.\nUsername lily has been used. Please enter a new username.\nUsername ANNA is available.\nUsername Chris has been used. Please enter a new username.\nUsername olivia is available.\n</pre> In\u00a0[26]: Copied! <pre>numbers = list(range(1, 10))\n\nfor number in numbers:\n    if number == 1:\n        ordinal = '1st'\n    elif number == 2:\n        ordinal = '2nd'\n    elif number == 3:\n        ordinal = '3rd'\n    else:\n        ordinal = f'{number}th'\n    print(ordinal)\n</pre> numbers = list(range(1, 10))  for number in numbers:     if number == 1:         ordinal = '1st'     elif number == 2:         ordinal = '2nd'     elif number == 3:         ordinal = '3rd'     else:         ordinal = f'{number}th'     print(ordinal)  <pre>1st\n2nd\n3rd\n4th\n5th\n6th\n7th\n8th\n9th\n</pre>"},{"location":"class510/lab4/#lab-4","title":"Lab 4\u00b6","text":""},{"location":"class510/lab4/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://whkim15.github.io/spatialtsp/class510/lab4</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"class510/lab4/#question-1","title":"Question 1\u00b6","text":"<p>Personal Message: Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d</p>"},{"location":"class510/lab4/#question-2","title":"Question 2\u00b6","text":"<p>Name Cases: Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case.</p>"},{"location":"class510/lab4/#question-3","title":"Question 3\u00b6","text":"<p>Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks:</p> <pre><code>Albert Einstein once said, \u201cA person who never made a mistake never tried anything new.\u201d\n</code></pre>"},{"location":"class510/lab4/#question-4","title":"Question 4\u00b6","text":"<p>Stripping Names: Use a variable to represent a person\u2019s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\", at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().</p>"},{"location":"class510/lab4/#question-5","title":"Question 5\u00b6","text":"<p>Names: Store the names of a few of your friends in a list called names. Print each person\u2019s name by accessing each element in the list, one at a time.</p>"},{"location":"class510/lab4/#question-6","title":"Question 6\u00b6","text":"<p>Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as \u201cI would like to own a Honda motorcycle.\u201d</p>"},{"location":"class510/lab4/#question-7","title":"Question 7\u00b6","text":"<p>Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza.</p> <p>Modify your for loop to print a sentence using the name of the pizza instead of printing just the name of the pizza. For each pizza you should have one line of output containing a simple statement like I like pepperoni pizza.</p>"},{"location":"class510/lab4/#question-8","title":"Question 8\u00b6","text":"<p>Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal.</p> <p>Modify your program to print a statement about each animal, such as A dog would make a great pet.</p>"},{"location":"class510/lab4/#question-9","title":"Question 9\u00b6","text":"<p>Summing a Hundred: Make a list of the numbers from one to one hundred, and then use <code>min()</code> and <code>max()</code> to make sure your list actually starts at one and ends at one hundred. Also, use the sum() function to see how quickly Python can add a hundred numbers.</p>"},{"location":"class510/lab4/#question-10","title":"Question 10\u00b6","text":"<p>Odd Numbers: Use the third argument of the <code>range()</code> function to make a list of the odd numbers from 1 to 20. Use a <code>for</code> loop to print each number.</p>"},{"location":"class510/lab4/#question-11","title":"Question 11\u00b6","text":"<p>Threes: Make a list of the multiples of 3 from 3 to 30. Use a <code>for</code> loop to print the numbers in your list.</p>"},{"location":"class510/lab4/#question-12","title":"Question 12\u00b6","text":"<p>Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes.</p>"},{"location":"class510/lab4/#question-13","title":"Question 13\u00b6","text":"<p>Slices: Using one of the programs you wrote in this lab, add several lines to the end of the program that do the following:</p> <p>Print the message The first three items in the list are:. Then use a slice to print the first three items from that program\u2019s list.</p>"},{"location":"class510/lab4/#question-14","title":"Question 14\u00b6","text":"<p>Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple.</p> <p>Use a for loop to print each food the restaurant offers.</p>"},{"location":"class510/lab4/#question-15","title":"Question 15\u00b6","text":"<p>Alien Colors: Imagine an alien was just shot down in a game. Create a variable called <code>alien_color</code> and assign it a value of <code>green, yellow,</code> or <code>red</code>.</p> <ul> <li>Write an if statement to test whether the alien\u2019s color is green. If it is, print a message that the player just earned 5 points.</li> <li>Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.)</li> </ul>"},{"location":"class510/lab4/#question-16","title":"Question 16\u00b6","text":"<p>Stages of Life: Write an <code>if-elif-else</code> chain that determines a person\u2019s stage of life. Set a value for the variable <code>age</code>, and then:</p> <ul> <li>If the person is less than 2 years old, print a message that the person is a baby.</li> <li>If the person is at least 2 years old but less than 4, print a message that the person is a toddler.</li> <li>If the person is at least 4 years old but less than 13, print a message that the person is a kid.</li> <li>If the person is at least 13 years old but less than 20, print a message that the person is a teenager.</li> <li>If the person is at least 20 years old but less than 65, print a message that the person is an adult.</li> </ul>"},{"location":"class510/lab4/#question-17","title":"Question 17\u00b6","text":"<p>Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent <code>if</code> statements that check for certain fruits in your list.</p> <ul> <li>Make a list of your three favorite fruits and call it favorite_fruits.</li> <li>Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas!</li> </ul>"},{"location":"class510/lab4/#question-18","title":"Question 18\u00b6","text":"<p>Hello Admin: Make a list of five or more usernames, including the name <code>admin</code>. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user:</p> <ul> <li>If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report?</li> <li>Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.</li> </ul>"},{"location":"class510/lab4/#question-19","title":"Question 19\u00b6","text":"<p>Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username.</p> <ul> <li>Make a list of five or more usernames called <code>current_users</code>.</li> <li>Make another list of five usernames called <code>new_users</code>. Make sure one or two of the new usernames are also in the <code>current_users</code> list.</li> <li>Loop through the <code>new_users</code> list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available.</li> <li>Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you\u2019ll need to make a copy of <code>current_users</code> containing the lowercase versions of all existing users.)</li> </ul>"},{"location":"class510/lab4/#question-20","title":"Question 20\u00b6","text":"<p>Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3.</p> <ul> <li>Store the numbers 1 through 9 in a list.</li> <li>Loop through the list.</li> <li>Use an <code>if-elif-else</code> chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\", and each result should be on a separate line.</li> </ul>"},{"location":"class510/lab5/","title":"Lab5","text":"In\u00a0[12]: Copied! <pre># Define a dictionary with person's information\nperson_info = {\n    \"first_name\": \"Wanhee\",\n    \"last_name\": \"Kim\",\n    \"age\": 31,\n    \"city\": \"Knoxville\"\n}\n\n# Print each piece of information\nfor key, value in person_info.items():\n    print(f\"{key.title()}: {value}\")\n</pre> # Define a dictionary with person's information person_info = {     \"first_name\": \"Wanhee\",     \"last_name\": \"Kim\",     \"age\": 31,     \"city\": \"Knoxville\" }  # Print each piece of information for key, value in person_info.items():     print(f\"{key.title()}: {value}\") <pre>First_Name: Wanhee\nLast_Name: Kim\nAge: 31\nCity: Knoxville\n</pre> In\u00a0[13]: Copied! <pre>favorite_numbers = {\n    'Amy': 7,\n    'Joyce': 13,\n    'Bob': 22,\n    'Tom': 9,\n    'Annie': 3\n}\n\nfor name, number in favorite_numbers.items():\n    print(f\"{name}'s favorite number is {number}\")\n</pre> favorite_numbers = {     'Amy': 7,     'Joyce': 13,     'Bob': 22,     'Tom': 9,     'Annie': 3 }  for name, number in favorite_numbers.items():     print(f\"{name}'s favorite number is {number}\") <pre>Amy's favorite number is 7\nJoyce's favorite number is 13\nBob's favorite number is 22\nTom's favorite number is 9\nAnnie's favorite number is 3\n</pre> In\u00a0[14]: Copied! <pre>glossary = {\n    'for': 'A control flow statement for specifying iteration, which allows code to be executed repeatedly.',\n    'if': 'A conditional statement that executes a set of statements if a given condition is true.',\n    'loop': 'The action of doing something over and over again.',\n    'variables': 'Symbols that are used to store data values.',\n    'list': 'A data structure in Python that is a mutable, or changeable, ordered sequence of elements.'\n}\n\nfor term, meaning in glossary.items():\n    print(f\"{term}:\\n\\t{meaning}\")\n</pre> glossary = {     'for': 'A control flow statement for specifying iteration, which allows code to be executed repeatedly.',     'if': 'A conditional statement that executes a set of statements if a given condition is true.',     'loop': 'The action of doing something over and over again.',     'variables': 'Symbols that are used to store data values.',     'list': 'A data structure in Python that is a mutable, or changeable, ordered sequence of elements.' }  for term, meaning in glossary.items():     print(f\"{term}:\\n\\t{meaning}\")  <pre>for:\n\tA control flow statement for specifying iteration, which allows code to be executed repeatedly.\nif:\n\tA conditional statement that executes a set of statements if a given condition is true.\nloop:\n\tThe action of doing something over and over again.\nvariables:\n\tSymbols that are used to store data values.\nlist:\n\tA data structure in Python that is a mutable, or changeable, ordered sequence of elements.\n</pre> In\u00a0[15]: Copied! <pre>revised_terms = {\n    'string': 'A sequence of characters.',\n    'integer': 'A whole number without a fractional part.',\n    'float': 'A number that has a decimal point.',\n    'boolean': 'A data type that can hold one of two possible values: True or False.',\n    'conditional': 'Statements that perform different computations or actions depending on whether a condition evaluates to true or false.'\n}\n\nglossary.update(revised_terms)\n\nfor term, meaning in glossary.items():\n    print(f\"{term}:\\n\\t{meaning}\")\n</pre> revised_terms = {     'string': 'A sequence of characters.',     'integer': 'A whole number without a fractional part.',     'float': 'A number that has a decimal point.',     'boolean': 'A data type that can hold one of two possible values: True or False.',     'conditional': 'Statements that perform different computations or actions depending on whether a condition evaluates to true or false.' }  glossary.update(revised_terms)  for term, meaning in glossary.items():     print(f\"{term}:\\n\\t{meaning}\") <pre>for:\n\tA control flow statement for specifying iteration, which allows code to be executed repeatedly.\nif:\n\tA conditional statement that executes a set of statements if a given condition is true.\nloop:\n\tThe action of doing something over and over again.\nvariables:\n\tSymbols that are used to store data values.\nlist:\n\tA data structure in Python that is a mutable, or changeable, ordered sequence of elements.\nstring:\n\tA sequence of characters.\ninteger:\n\tA whole number without a fractional part.\nfloat:\n\tA number that has a decimal point.\nboolean:\n\tA data type that can hold one of two possible values: True or False.\nconditional:\n\tStatements that perform different computations or actions depending on whether a condition evaluates to true or false.\n</pre> In\u00a0[16]: Copied! <pre>rivers = {\n    'Nile': 'Egypt',\n    'Han': 'Korea',\n    'Tennessee': 'USA'\n}\n\nfor river, country in rivers.items():\n    print(f\"The {river} runs through {country}.\")\n\nprint(\"\\nThe following rivers are included:\")\nfor river in rivers.keys():\n    print(river)\n\nprint(\"\\nThese rivers run through the following countries:\")\nfor country in rivers.values():\n    print(country)\n</pre> rivers = {     'Nile': 'Egypt',     'Han': 'Korea',     'Tennessee': 'USA' }  for river, country in rivers.items():     print(f\"The {river} runs through {country}.\")  print(\"\\nThe following rivers are included:\") for river in rivers.keys():     print(river)  print(\"\\nThese rivers run through the following countries:\") for country in rivers.values():     print(country) <pre>The Nile runs through Egypt.\nThe Han runs through Korea.\nThe Tennessee runs through USA.\n\nThe following rivers are included:\nNile\nHan\nTennessee\n\nThese rivers run through the following countries:\nEgypt\nKorea\nUSA\n</pre> In\u00a0[17]: Copied! <pre>cities = {\n    'Knoxville': {'country': 'USA', 'population': '187,500', 'fact': 'Home to the University of Tennessee'},\n    'Seoul': {'country': 'South Korea', 'population': '9.7 million', 'fact': 'Home to the Seoul National University'},\n    'Beijing': {'country': 'China', 'population': '21 million', 'fact': 'Home to the Peking University'}\n}\n\nfor city, info in cities.items():\n    print(f\"\\n{city}:\")\n    for key, value in info.items():\n        print(f\"  {key.title()}: {value}\")\n</pre> cities = {     'Knoxville': {'country': 'USA', 'population': '187,500', 'fact': 'Home to the University of Tennessee'},     'Seoul': {'country': 'South Korea', 'population': '9.7 million', 'fact': 'Home to the Seoul National University'},     'Beijing': {'country': 'China', 'population': '21 million', 'fact': 'Home to the Peking University'} }  for city, info in cities.items():     print(f\"\\n{city}:\")     for key, value in info.items():         print(f\"  {key.title()}: {value}\") <pre>\nKnoxville:\n  Country: USA\n  Population: 187,500\n  Fact: Home to the University of Tennessee\n\nSeoul:\n  Country: South Korea\n  Population: 9.7 million\n  Fact: Home to the Seoul National University\n\nBeijing:\n  Country: China\n  Population: 21 million\n  Fact: Home to the Peking University\n</pre> In\u00a0[18]: Copied! <pre>def rental_car_request(car_type):\n    return f\"Let me see if I can find you a {car_type}.\"\n\nexample_car_type = \"Genesis\"\nrental_car_message = rental_car_request(example_car_type)\nprint(\"\\n\" + rental_car_message)\n</pre> def rental_car_request(car_type):     return f\"Let me see if I can find you a {car_type}.\"  example_car_type = \"Genesis\" rental_car_message = rental_car_request(example_car_type) print(\"\\n\" + rental_car_message) <pre>\nLet me see if I can find you a Genesis.\n</pre> In\u00a0[19]: Copied! <pre>def check_table(group_size):\n    if group_size &gt; 8:\n        return \"You\u2019ll have to wait for a table.\"\n    else:\n        return \"Your table is ready.\"\n    \n\n# Example usage of the function:\nrestaurant_seating_message_1 = check_table(10) \nrestaurant_seating_message_2 = check_table(6) \nprint(restaurant_seating_message_1)\nprint(restaurant_seating_message_2)\n</pre> def check_table(group_size):     if group_size &gt; 8:         return \"You\u2019ll have to wait for a table.\"     else:         return \"Your table is ready.\"       # Example usage of the function: restaurant_seating_message_1 = check_table(10)  restaurant_seating_message_2 = check_table(6)  print(restaurant_seating_message_1) print(restaurant_seating_message_2) <pre>You\u2019ll have to wait for a table.\nYour table is ready.\n</pre> In\u00a0[20]: Copied! <pre>def is_multiple_of_ten(number):\n    return number % 10 == 0\n\n# Example usage of the function:\nis_ten_multiple_1 = is_multiple_of_ten(20)  \nis_ten_multiple_2 = is_multiple_of_ten(23) \n\nprint(is_ten_multiple_1)\nprint(is_ten_multiple_2)\n</pre> def is_multiple_of_ten(number):     return number % 10 == 0  # Example usage of the function: is_ten_multiple_1 = is_multiple_of_ten(20)   is_ten_multiple_2 = is_multiple_of_ten(23)   print(is_ten_multiple_1) print(is_ten_multiple_2) <pre>True\nFalse\n</pre> In\u00a0[21]: Copied! <pre>def add_toppings():\n    toppings = []\n    while True:\n        topping = input(f\"Enter a topping for your pizza (type 'quit' to finish): \")\n        if topping == 'quit':\n            break\n        toppings.append(topping)\n        print(f\"I'll add {topping} to your pizza.\")\n    return toppings\n\n# write the toppings for the function:\nadd_toppings()\n</pre> def add_toppings():     toppings = []     while True:         topping = input(f\"Enter a topping for your pizza (type 'quit' to finish): \")         if topping == 'quit':             break         toppings.append(topping)         print(f\"I'll add {topping} to your pizza.\")     return toppings  # write the toppings for the function: add_toppings() <pre>I'll add corn to your pizza.\nI'll add ham to your pizza.\nI'll add bacon to your pizza.\n</pre> Out[21]: <pre>['corn', 'ham', 'bacon']</pre> In\u00a0[22]: Copied! <pre>def display_message():\n    print(\"I'm learning about functions, loops, and conditionals in this chapter\")\n\n\nlearning_message = display_message()\nprint(learning_message)\n</pre> def display_message():     print(\"I'm learning about functions, loops, and conditionals in this chapter\")   learning_message = display_message() print(learning_message) <pre>I'm learning about functions, loops, and conditionals in this chapter\nNone\n</pre> In\u00a0[23]: Copied! <pre>def favorite_book(title):\n    print(f\"One of my favorite books is {title}.\")\n\nrequest_book='Harry Potter'\nfavorite_book(request_book)\n</pre> def favorite_book(title):     print(f\"One of my favorite books is {title}.\")  request_book='Harry Potter' favorite_book(request_book) <pre>One of my favorite books is Harry Potter.\n</pre> In\u00a0[24]: Copied! <pre>def make_shirt(size, message):\n    print(f\"The size of the shirt is {size} and the text printed on it is '{message}'.\")\n\nmake_shirt('Medium', 'Go Vols!')\nmake_shirt(size='Small', message='Tennessee.')\n</pre> def make_shirt(size, message):     print(f\"The size of the shirt is {size} and the text printed on it is '{message}'.\")  make_shirt('Medium', 'Go Vols!') make_shirt(size='Small', message='Tennessee.') <pre>The size of the shirt is Medium and the text printed on it is 'Go Vols!'.\nThe size of the shirt is Small and the text printed on it is 'Tennessee.'.\n</pre> In\u00a0[25]: Copied! <pre>def make_shirt(size='Large', message='I love Python.'):\n    print(f\"The size of the shirt is {size} and the text printed on it is '{message}'.\")\n\nmake_shirt()  # This will use the default values.\nmake_shirt(size='Small', message='I love GEOG510!')\n</pre> def make_shirt(size='Large', message='I love Python.'):     print(f\"The size of the shirt is {size} and the text printed on it is '{message}'.\")  make_shirt()  # This will use the default values. make_shirt(size='Small', message='I love GEOG510!') <pre>The size of the shirt is Large and the text printed on it is 'I love Python.'.\nThe size of the shirt is Small and the text printed on it is 'I love GEOG510!'.\n</pre> In\u00a0[26]: Copied! <pre>def describe_city(city, country='Iceland'):\n    print(f\"{city} is in {country}.\")\n\ndescribe_city('Reykjavik')\ndescribe_city('Seoul', country='South Korea')\ndescribe_city('Knoxville', country='USA')\n</pre> def describe_city(city, country='Iceland'):     print(f\"{city} is in {country}.\")  describe_city('Reykjavik') describe_city('Seoul', country='South Korea') describe_city('Knoxville', country='USA') <pre>Reykjavik is in Iceland.\nSeoul is in South Korea.\nKnoxville is in USA.\n</pre> In\u00a0[27]: Copied! <pre>def city_country(city, country):\n    return f\"{city}, {country}\"\n\nprint(city_country('Knoxville', 'USA'))\nprint(city_country('Seoul', 'South Korea'))\nprint(city_country('Beijing', 'China'))\n</pre> def city_country(city, country):     return f\"{city}, {country}\"  print(city_country('Knoxville', 'USA')) print(city_country('Seoul', 'South Korea')) print(city_country('Beijing', 'China')) <pre>Knoxville, USA\nSeoul, South Korea\nBeijing, China\n</pre> In\u00a0[28]: Copied! <pre>def make_album(artist_name, album_title, number_of_songs=None):\n    album = {'artist': artist_name, 'album': album_title}\n    if number_of_songs:\n        album['number_of_songs'] = number_of_songs\n    return album\n\nprint(make_album('Beyonce', 'Album1'))\nprint(make_album('Michael Jackson', 'Album2', number_of_songs=10))\nprint(make_album('Prince', 'Album3'))\n</pre> def make_album(artist_name, album_title, number_of_songs=None):     album = {'artist': artist_name, 'album': album_title}     if number_of_songs:         album['number_of_songs'] = number_of_songs     return album  print(make_album('Beyonce', 'Album1')) print(make_album('Michael Jackson', 'Album2', number_of_songs=10)) print(make_album('Prince', 'Album3')) <pre>{'artist': 'Beyonce', 'album': 'Album1'}\n{'artist': 'Michael Jackson', 'album': 'Album2', 'number_of_songs': 10}\n{'artist': 'Prince', 'album': 'Album3'}\n</pre> In\u00a0[29]: Copied! <pre># Re_Define question17\ndef make_album(artist_name, album_title, number_of_songs=None):\n    album = {'artist': artist_name, 'album': album_title}\n    if number_of_songs:\n        album['number_of_songs'] = number_of_songs\n    return album\n\n# Initialize an empty list to store albums\nuser_albums = []\n\n# Simulated user inputs\nwhile True:\n    artist = input(\"Enter artist name (or 'quit' to finish): \").strip() # Added 'strip function' to quit simulator easily\n    if artist.lower() == 'quit':\n        break\n    title = input(\"Enter album title: \")\n    songs = input(\"Enter number of songs (or leave blank if unknown): \")\n    songs = int(songs) if songs.isdigit() else None\n\n    album = make_album(artist, title, songs)\n    user_albums.append(album)\n\n# Print the list of user albums\nfor album in user_albums:\n    print(album)\n</pre> # Re_Define question17 def make_album(artist_name, album_title, number_of_songs=None):     album = {'artist': artist_name, 'album': album_title}     if number_of_songs:         album['number_of_songs'] = number_of_songs     return album  # Initialize an empty list to store albums user_albums = []  # Simulated user inputs while True:     artist = input(\"Enter artist name (or 'quit' to finish): \").strip() # Added 'strip function' to quit simulator easily     if artist.lower() == 'quit':         break     title = input(\"Enter album title: \")     songs = input(\"Enter number of songs (or leave blank if unknown): \")     songs = int(songs) if songs.isdigit() else None      album = make_album(artist, title, songs)     user_albums.append(album)  # Print the list of user albums for album in user_albums:     print(album) <pre>{'artist': 'prince', 'album': 'beautiful girl', 'number_of_songs': 14}\n</pre> In\u00a0[30]: Copied! <pre>def show_messages(messages):\n    for message in messages:\n        print(message)\n\nmessages = [\"Hello!\", \"My name is Wanhee Kim\", \"How are you?\"]\nshow_messages(messages)\n</pre> def show_messages(messages):     for message in messages:         print(message)  messages = [\"Hello!\", \"My name is Wanhee Kim\", \"How are you?\"] show_messages(messages) <pre>Hello!\nMy name is Wanhee Kim\nHow are you?\n</pre> In\u00a0[31]: Copied! <pre>messages = [\"Hello!\", \"My name is Wanhee Kim\", \"How are you?\"]\nsent_messages=[]\n\ndef send_messages(messages):\n    while messages:\n        current_message = messages.pop()\n        print(f\"Sending message: {current_message}\")\n        sent_messages.append(current_message)\n\nsend_messages(messages[:]) \nprint(\"Original messages:\", messages)\nprint(\"Sent messages:\", sent_messages)\n</pre> messages = [\"Hello!\", \"My name is Wanhee Kim\", \"How are you?\"] sent_messages=[]  def send_messages(messages):     while messages:         current_message = messages.pop()         print(f\"Sending message: {current_message}\")         sent_messages.append(current_message)  send_messages(messages[:])  print(\"Original messages:\", messages) print(\"Sent messages:\", sent_messages) <pre>Sending message: How are you?\nSending message: My name is Wanhee Kim\nSending message: Hello!\nOriginal messages: ['Hello!', 'My name is Wanhee Kim', 'How are you?']\nSent messages: ['How are you?', 'My name is Wanhee Kim', 'Hello!']\n</pre> In\u00a0[32]: Copied! <pre>text = \"\"\"In Python you can. Store information in variables.\nIn Python you can. Write functions to perform tasks.\nIn Python you can. Loop through lists.\"\"\"\n\n# entire file\nprint(text)\n\n# looping over the file object\nfor line in text.split('\\n'):\n    print(line)\n\n# storing the lines in a list &amp; working outside with block\nlines = text.split('\\n')\nfor line in lines:\n    print(line)\n</pre> text = \"\"\"In Python you can. Store information in variables. In Python you can. Write functions to perform tasks. In Python you can. Loop through lists.\"\"\"  # entire file print(text)  # looping over the file object for line in text.split('\\n'):     print(line)  # storing the lines in a list &amp; working outside with block lines = text.split('\\n') for line in lines:     print(line) <pre>In Python you can. Store information in variables.\nIn Python you can. Write functions to perform tasks.\nIn Python you can. Loop through lists.\nIn Python you can. Store information in variables.\nIn Python you can. Write functions to perform tasks.\nIn Python you can. Loop through lists.\nIn Python you can. Store information in variables.\nIn Python you can. Write functions to perform tasks.\nIn Python you can. Loop through lists.\n</pre> In\u00a0[33]: Copied! <pre>message = (\"I live in Nashville, USA.\\n\"\n           \"I am phd Student at University of Tennessee Nashville.\")\n\nprint(message)\n\nmodified_contents = message.replace('Nashville', 'Knoxville')\nprint(modified_contents)\n</pre> message = (\"I live in Nashville, USA.\\n\"            \"I am phd Student at University of Tennessee Nashville.\")  print(message)  modified_contents = message.replace('Nashville', 'Knoxville') print(modified_contents)  <pre>I live in Nashville, USA.\nI am phd Student at University of Tennessee Nashville.\nI live in Knoxville, USA.\nI am phd Student at University of Tennessee Knoxville.\n</pre> In\u00a0[34]: Copied! <pre># Define writing txt \ndef write_guest_name(filename, guest_name):\n    with open(filename, 'a') as f:\n        f.write(guest_name + \"\\n\")\n\n#add_guest\ninput_name = \"Wanhee\"\n\ndef add_guest():\n    print(f\"What's your name?\")\n    guest_name = input_name\n    # Write to guest.txt file \n    print(f\"Hello, {guest_name}! Your name has been added to the guest book.\")\n    return guest_name  \n\n# Call the add_guest function and simulate writing to a file\nguest_name = add_guest()\n\n\n#write_guest_name(f'D:/GIS program/Github/geog510/exercise/guest.txt', guest_name)\n</pre> # Define writing txt  def write_guest_name(filename, guest_name):     with open(filename, 'a') as f:         f.write(guest_name + \"\\n\")  #add_guest input_name = \"Wanhee\"  def add_guest():     print(f\"What's your name?\")     guest_name = input_name     # Write to guest.txt file      print(f\"Hello, {guest_name}! Your name has been added to the guest book.\")     return guest_name    # Call the add_guest function and simulate writing to a file guest_name = add_guest()   #write_guest_name(f'D:/GIS program/Github/geog510/exercise/guest.txt', guest_name) <pre>What's your name?\nHello, Wanhee! Your name has been added to the guest book.\n</pre> In\u00a0[35]: Copied! <pre>guest_name = [\"Dr.Wu\", \"Dr.Hyun\", \"Mr.Wanhee\"]\n\ndef add_to_guest_book():\n    booked_names = guest_name\n    for names in booked_names:\n        print(f\"Hello, {names}! Your name has been added to the guest book.\")\n\n# Call the add_to_guest_book function to simulate the guest book process\nadd_to_guest_book()\n</pre> guest_name = [\"Dr.Wu\", \"Dr.Hyun\", \"Mr.Wanhee\"]  def add_to_guest_book():     booked_names = guest_name     for names in booked_names:         print(f\"Hello, {names}! Your name has been added to the guest book.\")  # Call the add_to_guest_book function to simulate the guest book process add_to_guest_book()  <pre>Hello, Dr.Wu! Your name has been added to the guest book.\nHello, Dr.Hyun! Your name has been added to the guest book.\nHello, Mr.Wanhee! Your name has been added to the guest book.\n</pre> In\u00a0[37]: Copied! <pre>reasons_file = 'C:\\\\Users\\\\dooco\\\\OneDrive\\\\5. Doctoral Degree\\\\1. Class\\\\8. GEOG510\\\\responses.txt'\nwith open(reasons_file, 'a') as file:\n    while True:\n        reason = input(\"Why do you like programming? (type 'quit' to end) \")\n        if reason == 'quit':\n            break\n        file.write(reason + \"\\n\")\n</pre> reasons_file = 'C:\\\\Users\\\\dooco\\\\OneDrive\\\\5. Doctoral Degree\\\\1. Class\\\\8. GEOG510\\\\responses.txt' with open(reasons_file, 'a') as file:     while True:         reason = input(\"Why do you like programming? (type 'quit' to end) \")         if reason == 'quit':             break         file.write(reason + \"\\n\") In\u00a0[38]: Copied! <pre>def add_numbers():\n    try:\n        x = int(a)\n        y = int(b)\n        sum = x + y\n    except ValueError:\n        print(\"Please enter a valid number.\")\n    else:\n        print(f\"The sum of {x} and {y} is {sum}.\")\n\n(a,b) =(10, 5)\nadd_numbers()\n\n(a,b) =(10, \"data\")\nadd_numbers()\n</pre> def add_numbers():     try:         x = int(a)         y = int(b)         sum = x + y     except ValueError:         print(\"Please enter a valid number.\")     else:         print(f\"The sum of {x} and {y} is {sum}.\")  (a,b) =(10, 5) add_numbers()  (a,b) =(10, \"data\") add_numbers()  <pre>The sum of 10 and 5 is 15.\nPlease enter a valid number.\n</pre> In\u00a0[39]: Copied! <pre>def add_numbers(a, b):\n    try:\n        x = int(a)\n        y = int(b)\n        return x + y\n    except ValueError:\n        print(\"Please enter a valid number.\")\n        return None\n\nwhile True:\n    first_number = input(\"Enter first number (or 'quit' to finish): \")\n    if first_number.lower() == 'quit':\n        break\n    second_number = input(\"Enter second number: \")\n    result = add_numbers(first_number, second_number)\n    \n    if result is not None:\n        print(f\"The sum of {first_number} and {second_number} is {result}.\")\n</pre> def add_numbers(a, b):     try:         x = int(a)         y = int(b)         return x + y     except ValueError:         print(\"Please enter a valid number.\")         return None  while True:     first_number = input(\"Enter first number (or 'quit' to finish): \")     if first_number.lower() == 'quit':         break     second_number = input(\"Enter second number: \")     result = add_numbers(first_number, second_number)          if result is not None:         print(f\"The sum of {first_number} and {second_number} is {result}.\") <pre>The sum of 10 and 5 is 15.\nThe sum of 13 and 245 is 258.\n</pre> In\u00a0[40]: Copied! <pre>def print_file_contents(filename):\n    try:\n        with open(filename, 'r') as f:\n            contents = f.read()\n            print(contents)\n    except FileNotFoundError:\n        print(f\"Sorry, the file {filename} does not exist.\")\n\nprint_file_contents(f'D:/GIS program/Github/geog510/exercise/cats.txt')\nprint_file_contents(f'D:/GIS program/Github/geog510/exercise/dogs.txt')\n#print_file_contents(f'D:/GIS program/Github/geog510/exercise/rabbits.txt')\n</pre> def print_file_contents(filename):     try:         with open(filename, 'r') as f:             contents = f.read()             print(contents)     except FileNotFoundError:         print(f\"Sorry, the file {filename} does not exist.\")  print_file_contents(f'D:/GIS program/Github/geog510/exercise/cats.txt') print_file_contents(f'D:/GIS program/Github/geog510/exercise/dogs.txt') #print_file_contents(f'D:/GIS program/Github/geog510/exercise/rabbits.txt')  <pre>Sorry, the file D:/GIS program/Github/geog510/exercise/cats.txt does not exist.\nSorry, the file D:/GIS program/Github/geog510/exercise/dogs.txt does not exist.\n</pre> In\u00a0[41]: Copied! <pre>def print_file_contents_silently(filename):\n    try:\n        with open(filename, 'r') as f:\n            contents = f.read()\n            print(contents)\n    except FileNotFoundError:\n        pass \n\nprint_file_contents_silently(f'D:/GIS program/Github/geog510/exercise/cats.txt')\nprint_file_contents_silently(f'D:/GIS program/Github/geog510/exercise/dogs.txt')\n#print_file_contents_silently(f'D:/GIS program/Github/geog510/exercise/rabbits.txt')\n</pre> def print_file_contents_silently(filename):     try:         with open(filename, 'r') as f:             contents = f.read()             print(contents)     except FileNotFoundError:         pass   print_file_contents_silently(f'D:/GIS program/Github/geog510/exercise/cats.txt') print_file_contents_silently(f'D:/GIS program/Github/geog510/exercise/dogs.txt') #print_file_contents_silently(f'D:/GIS program/Github/geog510/exercise/rabbits.txt') In\u00a0[43]: Copied! <pre>line = \"Row, row, row your boat\"\nline.count(\"row\")\n</pre> line = \"Row, row, row your boat\" line.count(\"row\") Out[43]: <pre>2</pre> In\u00a0[44]: Copied! <pre>line.lower().count(\"row\")\n</pre> line.lower().count(\"row\") Out[44]: <pre>3</pre> <p>Notice that converting the string to lowercase using lower() catches all appearances of the word you\u2019re looking for, regardless of how it\u2019s formatted.</p> <p>Write a program that reads the files you found at Project Gutenberg and determines how many times the word <code>the</code> appears in each text. This will be an approximation because it will also count words such as <code>then</code> and <code>there</code>. Try counting <code>the</code>, with a space in the string, and see how much lower your count is.</p> In\u00a0[42]: Copied! <pre>import requests\n\n# URL of the text file\nurl = 'https://gutenberg.org/cache/epub/73159/pg73159.txt'\n\n# Send a GET request to the URL\nresponse = requests.get(url)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Read the content of the file\n    text = response.text.lower()  # Convert text to lowercase\n\n    # Words to count\n    words_to_count = ['the', 'then', 'there']\n\n    # Dictionary to store the counts\n    word_counts = {word: text.count(f' {word} ') for word in words_to_count}\n\n    # Print the counts\n    for word, count in word_counts.items():\n        print(f\"The word '{word}' appears {count} times in the text.\")\nelse:\n    print(\"Failed to retrieve the text file.\")\n</pre> import requests  # URL of the text file url = 'https://gutenberg.org/cache/epub/73159/pg73159.txt'  # Send a GET request to the URL response = requests.get(url)  # Check if the request was successful if response.status_code == 200:     # Read the content of the file     text = response.text.lower()  # Convert text to lowercase      # Words to count     words_to_count = ['the', 'then', 'there']      # Dictionary to store the counts     word_counts = {word: text.count(f' {word} ') for word in words_to_count}      # Print the counts     for word, count in word_counts.items():         print(f\"The word '{word}' appears {count} times in the text.\") else:     print(\"Failed to retrieve the text file.\")   <pre>The word 'the' appears 11607 times in the text.\nThe word 'then' appears 122 times in the text.\nThe word 'there' appears 255 times in the text.\n</pre>"},{"location":"class510/lab5/#lab-5","title":"Lab 5\u00b6","text":""},{"location":"class510/lab5/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://whkim15.github.io/spatialtsp/</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"class510/lab5/#question-1","title":"Question 1\u00b6","text":"<p>Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary.</p>"},{"location":"class510/lab5/#question-2","title":"Question 2\u00b6","text":"<p>Favorite Numbers: Use a dictionary to store people\u2019s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person\u2019s name and their favorite number. For even more fun, poll a few friends and get some actual data for your program.</p>"},{"location":"class510/lab5/#question-3","title":"Question 3\u00b6","text":"<p>Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let\u2019s call it a glossary.</p> <ul> <li>Think of five programming words you\u2019ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values.</li> <li>Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\\n) to insert a blank line between each word-meaning pair in your output.</li> </ul>"},{"location":"class510/lab5/#question-4","title":"Question 4\u00b6","text":"<p>Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Question 3 by replacing your series of print() calls with a loop that runs through the dictionary\u2019s keys and values. When you\u2019re sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output.</p>"},{"location":"class510/lab5/#question-5","title":"Question 5\u00b6","text":"<p>Rivers: Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt'.</p> <ul> <li>Use a loop to print a sentence about each river, such as The Nile runs through Egypt.</li> <li>Use a loop to print the name of each river included in the dictionary.</li> <li>Use a loop to print the name of each country included in the dictionary.</li> </ul>"},{"location":"class510/lab5/#question-6","title":"Question 6\u00b6","text":"<p>Cities: Make a dictionary called <code>cities</code>. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city\u2019s dictionary should be something like <code>country</code>, <code>population</code>, and <code>fact</code>. Print the name of each city and all of the information you have stored about it.</p>"},{"location":"class510/lab5/#question-7","title":"Question 7\u00b6","text":"<p>Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as \u201cLet me see if I can find you a Subaru.\u201d</p>"},{"location":"class510/lab5/#question-8","title":"Question 8\u00b6","text":"<p>Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they\u2019ll have to wait for a table. Otherwise, report that their table is ready.</p>"},{"location":"class510/lab5/#question-9","title":"Question 9\u00b6","text":"<p>Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not.</p>"},{"location":"class510/lab5/#question-10","title":"Question 10\u00b6","text":"<p>Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you\u2019ll add that topping to their pizza.</p>"},{"location":"class510/lab5/#question-11","title":"Question 11\u00b6","text":"<p>Message: Write a function called <code>display_message()</code> that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.</p>"},{"location":"class510/lab5/#question-12","title":"Question 12\u00b6","text":"<p>Favorite Book: Write a function called <code>favorite_book()</code> that accepts one parameter, title. The function should print a message, such as <code>One of my favorite books is Alice in Wonderland</code>. Call the function, making sure to include a book title as an argument in the function call.</p>"},{"location":"class510/lab5/#question-13","title":"Question 13\u00b6","text":"<p>T-Shirt: Write a function called <code>make_shirt()</code> that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it.</p> <p>Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.</p>"},{"location":"class510/lab5/#question-14","title":"Question 14\u00b6","text":"<p>Large Shirts: Modify the <code>make_shirt()</code> function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message.</p>"},{"location":"class510/lab5/#question-15","title":"Question 15\u00b6","text":"<p>Cities: Write a function called <code>describe_city()</code> that accepts the name of a city and its country. The function should print a simple sentence, such as <code>Reykjavik is in Iceland</code>. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.</p>"},{"location":"class510/lab5/#question-16","title":"Question 16\u00b6","text":"<p>City Names: Write a function called <code>city_country()</code> that takes in the name of a city and its country. The function should return a string formatted like this:</p> <pre>Santiago, Chile\n</pre> <p>Call your function with at least three city-country pairs, and print the values that are returned.</p>"},{"location":"class510/lab5/#question-17","title":"Question 17\u00b6","text":"<p>Album: Write a function called <code>make_album()</code> that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly.</p> <p>Use None to add an optional parameter to make_album() that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album\u2019s dictionary. Make at least one new function call that includes the number of songs on an album.</p>"},{"location":"class510/lab5/#question-18","title":"Question 18\u00b6","text":"<p>User Albums: Start with your program from Question 17. Write a <code>while</code> loop that allows users to enter an album\u2019s artist and title. Once you have that information, call <code>make_album()</code> with the user\u2019s input and print the dictionary that\u2019s created. Be sure to include a quit value in the <code>while</code> loop.</p>"},{"location":"class510/lab5/#question-19","title":"Question 19\u00b6","text":"<p>Messages: Make a list containing a series of short text messages. Pass the list to a function called <code>show_messages()</code>, which prints each text message.</p>"},{"location":"class510/lab5/#question-20","title":"Question 20\u00b6","text":"<p>Sending Messages: Start with a copy of your program from Question 19. Write a function called <code>send_messages()</code> that prints each text message and moves each message to a new list called <code>sent_messages</code> as it\u2019s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.</p>"},{"location":"class510/lab5/#question-21","title":"Question 21\u00b6","text":"<p>Learning Python: Open a blank file in your text editor and write a few lines summarizing what you\u2019ve learned about Python so far. Start each line with the phrase In Python you can. . .. Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote three times. Print the contents once by reading in the entire file, once by looping over the file object, and once by storing the lines in a list and then working with them outside the with block.</p>"},{"location":"class510/lab5/#question-22","title":"Question 22\u00b6","text":"<p>Learning C: You can use the replace() method to replace any word in a string with a different word. Here\u2019s a quick example showing how to replace 'dog' with 'cat' in a sentence:</p> <pre>message = \"I really like dogs.\"\nmessage.replace('dog', 'cat')\n'I really like cats.'\n</pre> <p>Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen.</p>"},{"location":"class510/lab5/#question-23","title":"Question 23\u00b6","text":"<p>Guest: Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt.</p>"},{"location":"class510/lab5/#question-24","title":"Question 24\u00b6","text":"<p>Guest Book: Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file.</p>"},{"location":"class510/lab5/#question-25","title":"Question 25\u00b6","text":"<p>Programming Poll: Write a while loop that asks people why they like programming. Each time someone enters a reason, add their reason to a file that stores all the responses.</p>"},{"location":"class510/lab5/#question-26","title":"Question 26\u00b6","text":"<p>Addition: One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you\u2019ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number.</p>"},{"location":"class510/lab5/#question-27","title":"Question 27\u00b6","text":"<p>Addition Calculator: Wrap your code from Question 26 in a while loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number.</p>"},{"location":"class510/lab5/#question-28","title":"Question 28\u00b6","text":"<p>Cats and Dogs: Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a <code>try-except</code> block to catch the <code>FileNotFound</code> error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the <code>except</code> block executes properly.</p>"},{"location":"class510/lab5/#question-29","title":"Question 29\u00b6","text":"<p>Silent Cats and Dogs: Modify your except block in Question 28 to fail silently if either file is missing.</p>"},{"location":"class510/lab5/#question-30","title":"Question 30\u00b6","text":"<p>Common Words: Visit Project Gutenberg (https://gutenberg.org/) and find a few texts you\u2019d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the <code>count()</code> method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appears in a string:</p>"},{"location":"examples/Lab9/","title":"Lab9","text":"In\u00a0[1]: Copied! <pre>## change the directory of spatialtsp to the current directory\n\nimport sys\nsys.path.insert(0, 'D:\\\\GIS program\\\\Github\\\\spatialtsp\\\\spatialtsp-5')\nimport spatialtsp\nprint(spatialtsp.__file__)\n</pre> ## change the directory of spatialtsp to the current directory  import sys sys.path.insert(0, 'D:\\\\GIS program\\\\Github\\\\spatialtsp\\\\spatialtsp-5') import spatialtsp print(spatialtsp.__file__)  <pre>D:\\GIS program\\Github\\spatialtsp\\spatialtsp-5\\spatialtsp\\__init__.py\n</pre> In\u00a0[2]: Copied! <pre>m = spatialtsp.Map()\nm.add_basemap_gui()\n\nm\n</pre> m = spatialtsp.Map() m.add_basemap_gui()  m Out[2]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[4]: Copied! <pre>## add the toolbar\n\nfrom spatialtsp import Map\n#Create a map\nm = spatialtsp.Map()\n\n#add toolbar using the add_toolbar function\n#explore the buttons at your leisure\n\n\nm.add_toolbar()\n\nm\n</pre> ## add the toolbar  from spatialtsp import Map #Create a map m = spatialtsp.Map()  #add toolbar using the add_toolbar function #explore the buttons at your leisure   m.add_toolbar()  m  Out[4]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre>"},{"location":"examples/Lab9/#vector-map","title":"Vector Map\u00b6","text":""},{"location":"examples/Vector/","title":"Vector","text":"In\u00a0[\u00a0]: Copied! <pre>import json\nfrom ipyleaflet import Map, GeoJSON\n\nwith open('europe_110.geo.json', 'r') as f:\n    data = json.load(f)\n\nm = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)\n\ngeo_json = GeoJSON(\n    data=data,\n)\nm.add(geo_json)\n\nm\n</pre> import json from ipyleaflet import Map, GeoJSON  with open('europe_110.geo.json', 'r') as f:     data = json.load(f)  m = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  geo_json = GeoJSON(     data=data, ) m.add(geo_json)  m In\u00a0[\u00a0]: Copied! <pre>import os\nimport json\nimport random\nimport requests\n\nfrom ipyleaflet import Map, GeoJSON\n\nif not os.path.exists('europe_110.geo.json'):\n    url = 'https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json'\n    r = requests.get(url)\n    with open('europe_110.geo.json', 'w') as f:\n        f.write(r.content.decode(\"utf-8\"))\n\nwith open('europe_110.geo.json', 'r') as f:\n    data = json.load(f)\n\ndef random_color(feature):\n    return {\n        'color': 'black',\n        'fillColor': random.choice(['red', 'yellow', 'green', 'orange']),\n    }\n\nm = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)\n\ngeo_json = GeoJSON(\n    data=data,\n    style={\n        'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.1, 'weight': 1\n    },\n    hover_style={\n        'color': 'white', 'dashArray': '0', 'fillOpacity': 0.5\n    },\n    style_callback=random_color\n)\nm.add(geo_json)\n\nm\n</pre> import os import json import random import requests  from ipyleaflet import Map, GeoJSON  if not os.path.exists('europe_110.geo.json'):     url = 'https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json'     r = requests.get(url)     with open('europe_110.geo.json', 'w') as f:         f.write(r.content.decode(\"utf-8\"))  with open('europe_110.geo.json', 'r') as f:     data = json.load(f)  def random_color(feature):     return {         'color': 'black',         'fillColor': random.choice(['red', 'yellow', 'green', 'orange']),     }  m = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  geo_json = GeoJSON(     data=data,     style={         'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.1, 'weight': 1     },     hover_style={         'color': 'white', 'dashArray': '0', 'fillOpacity': 0.5     },     style_callback=random_color ) m.add(geo_json)  m In\u00a0[\u00a0]: Copied! <pre>%pip install pyshp\n</pre> %pip install pyshp In\u00a0[2]: Copied! <pre>import spatialtsp\n</pre> import spatialtsp In\u00a0[3]: Copied! <pre>m=spatialtsp.Map()\nm.add_basemap(\"OpenTopoMap\")\n#m.add_geojson(\"europe_110.geo.json\")\n\n#m.add_geojson(\"countries.geojson\", name=\"Countries\")\nm.add_shp(\"countries.shp\", name=\"Countries\")\nm.add_layers_control()\nm\n</pre> m=spatialtsp.Map() m.add_basemap(\"OpenTopoMap\") #m.add_geojson(\"europe_110.geo.json\")  #m.add_geojson(\"countries.geojson\", name=\"Countries\") m.add_shp(\"countries.shp\", name=\"Countries\") m.add_layers_control() m Out[3]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre>"},{"location":"examples/csv/","title":"Csv","text":"In\u00a0[2]: Copied! <pre>import spatialtsp\n</pre> import spatialtsp In\u00a0[3]: Copied! <pre>from spatialtsp import utils\n</pre> from spatialtsp import utils In\u00a0[7]: Copied! <pre>csv=\"https://github.com/opengeos/datasets/releases/download/us/us_states.csv\"\ndf=utils.csv_to_df(csv)\n</pre> csv=\"https://github.com/opengeos/datasets/releases/download/us/us_states.csv\" df=utils.csv_to_df(csv)"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[\u00a0]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!')"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[\u00a0]: Copied! <pre>from ipyleaflet import basemaps\n</pre> from ipyleaflet import basemaps In\u00a0[\u00a0]: Copied! <pre>url = eval(\"basemaps.OpenTopoMap\").build_url()\n</pre> url = eval(\"basemaps.OpenTopoMap\").build_url() In\u00a0[\u00a0]: Copied! <pre>import spatialtsp\n#import ipyleaflet\n</pre> import spatialtsp #import ipyleaflet In\u00a0[\u00a0]: Copied! <pre>m = spatialtsp.Map()\nm.add_basemap(\"OpenTopoMap\")\nm.add_layers_control()\nm\n</pre> m = spatialtsp.Map() m.add_basemap(\"OpenTopoMap\") m.add_layers_control() m In\u00a0[\u00a0]: Copied! <pre>m = spatialtsp.Map()\n\nurl = 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'\n#layer = ipyleaflet.TileLayer(url=url, name='EsriMap', opacity=0.5)\nm.add_tile_layer(url=url, name='World Imagery', attribution='Esri')\nm\n</pre> m = spatialtsp.Map()  url = 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}' #layer = ipyleaflet.TileLayer(url=url, name='EsriMap', opacity=0.5) m.add_tile_layer(url=url, name='World Imagery', attribution='Esri') m In\u00a0[\u00a0]: Copied! <pre>from ipyleaflet import Map, basemaps\ncenter = [38.128, 2.588]\nzoom=5\n\nm=Map(basemap=basemaps.Esri.WorldImagery, center=center, zoom=zoom)\n</pre> from ipyleaflet import Map, basemaps center = [38.128, 2.588] zoom=5  m=Map(basemap=basemaps.Esri.WorldImagery, center=center, zoom=zoom) In\u00a0[\u00a0]: Copied! <pre>m.layers\n</pre> m.layers In\u00a0[\u00a0]: Copied! <pre>layer.interact(opacity=(0.0, 1.0, 0.1))\n</pre> layer.interact(opacity=(0.0, 1.0, 0.1)) In\u00a0[\u00a0]: Copied! <pre>from ipyleaflet import basemaps, WidgetControl\nfrom ipywidgets import IntSlider, ColorPicker, jslink, Output\nimport spatialtsp\n\nm = spatialtsp.Map(center=(46.01, 6.16), zoom=12, basemap=basemaps.OpenTopoMap)\nzoom_slider = IntSlider(description='Zoom level:', min=0, max=24, value=7)\njslink((zoom_slider, 'value'), (m, 'zoom'))  # Link 'the slider' to the 'zoom level' of the map / \uadf8\ub9ac\uace0 zoom_slider \uc815\uc758 \ud568\uc218 \uc774\ud6c4\uc5d0\ub294 \uc5b4\ub514\uc5d0 \uc788\uc5b4\ub3c4 \uc0c1\uad00 \uc5c6\uc74c\nwidget_control1 = WidgetControl(widget=zoom_slider, position='topright')\nm.add(widget_control1)\n\n\noutput_widget = Output(layout={'border': '1px solid black'})\noutput_control = WidgetControl(widget=output_widget, position='bottomright')\nm.add(output_control)\n\n# color_picker = ColorPicker(description='Pick a color:')\n# widget_control2 = WidgetControl(widget=color_picker, position='bottomright')\n# m.add(widget_control2)\nm\n</pre> from ipyleaflet import basemaps, WidgetControl from ipywidgets import IntSlider, ColorPicker, jslink, Output import spatialtsp  m = spatialtsp.Map(center=(46.01, 6.16), zoom=12, basemap=basemaps.OpenTopoMap) zoom_slider = IntSlider(description='Zoom level:', min=0, max=24, value=7) jslink((zoom_slider, 'value'), (m, 'zoom'))  # Link 'the slider' to the 'zoom level' of the map / \uadf8\ub9ac\uace0 zoom_slider \uc815\uc758 \ud568\uc218 \uc774\ud6c4\uc5d0\ub294 \uc5b4\ub514\uc5d0 \uc788\uc5b4\ub3c4 \uc0c1\uad00 \uc5c6\uc74c widget_control1 = WidgetControl(widget=zoom_slider, position='topright') m.add(widget_control1)   output_widget = Output(layout={'border': '1px solid black'}) output_control = WidgetControl(widget=output_widget, position='bottomright') m.add(output_control)  # color_picker = ColorPicker(description='Pick a color:') # widget_control2 = WidgetControl(widget=color_picker, position='bottomright') # m.add(widget_control2) m In\u00a0[\u00a0]: Copied! <pre>with output_widget:\n    output_widget.clear_output()\n    print('Hello world!')\n</pre> with output_widget:     output_widget.clear_output()     print('Hello world!') In\u00a0[\u00a0]: Copied! <pre># Graph \uc9d1\uc5b4\ub123\uae30\n</pre> # Graph \uc9d1\uc5b4\ub123\uae30 In\u00a0[\u00a0]: Copied! <pre>output_widget.clear_output()\nclear_output\n# how to clear only control ?\n</pre> output_widget.clear_output() clear_output # how to clear only control ? In\u00a0[\u00a0]: Copied! <pre>float_slider = widgets.FloatSlider(\n    value=0, min=0, max=10.0, step=0.1, description='Float slider:'\n)\n\nfloat_slider\n</pre> float_slider = widgets.FloatSlider(     value=0, min=0, max=10.0, step=0.1, description='Float slider:' )  float_slider In\u00a0[\u00a0]: Copied! <pre>output=widgets.Output()\noutput\n</pre> output=widgets.Output() output In\u00a0[\u00a0]: Copied! <pre>int_range = widgets.IntRangeSlider()\n#int_range = widgets.IntRangeSlider(value=1, max=100, step=1, description='opacity:')\n\ndef on_value_change(change):\n    with output:\n        output.clear_output()\n        print(change['new'])\n#    m.layer[-1].opacity = change['new']\n\nint_range.observe(on_value_change, 'value')\n</pre> int_range = widgets.IntRangeSlider() #int_range = widgets.IntRangeSlider(value=1, max=100, step=1, description='opacity:')  def on_value_change(change):     with output:         output.clear_output()         print(change['new']) #    m.layer[-1].opacity = change['new']  int_range.observe(on_value_change, 'value') In\u00a0[\u00a0]: Copied! <pre>import leafmap\n</pre> import leafmap In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/spatialtsp/","title":"Spatialtsp","text":"<ol> <li>Pre-Setting for Analysis</li> </ol> In\u00a0[\u00a0]: Copied! <pre>pip install spatialtsp\n</pre> pip install spatialtsp In\u00a0[\u00a0]: Copied! <pre># change path\nimport os\nos.chdir('D:/GIS program/Github/spatialtsp/spatialtsp-5')\n\n# Check the directory\n# current_directory = os.getcwd()\n# print(\"current directory:\", current_directory)\n\n# import spatialtsp\n# print(dir(spatialtsp))\n\n# # set working directory\n# path = 'D:/GIS program/Github/spatialtsp/final_work'\n# os.chdir(path)\n# os.getcwd()\n</pre> # change path import os os.chdir('D:/GIS program/Github/spatialtsp/spatialtsp-5')  # Check the directory # current_directory = os.getcwd() # print(\"current directory:\", current_directory)  # import spatialtsp # print(dir(spatialtsp))  # # set working directory # path = 'D:/GIS program/Github/spatialtsp/final_work' # os.chdir(path) # os.getcwd() In\u00a0[\u00a0]: Copied! <pre># Import the package\nfrom spatialtsp import generate_clustered_points, generate_random_points, calculate_distance_matrix, voronoi_adjacency_distance, knn_adjacency_distance, combine_distance_matrices, generate_lp_model, get_attributes_cplex, writeLpFile_func\n</pre> # Import the package from spatialtsp import generate_clustered_points, generate_random_points, calculate_distance_matrix, voronoi_adjacency_distance, knn_adjacency_distance, combine_distance_matrices, generate_lp_model, get_attributes_cplex, writeLpFile_func In\u00a0[\u00a0]: Copied! <pre>#print(dir(spatialtsp))\n</pre> #print(dir(spatialtsp)) <ol> <li>Generate Distance Matrix(standard vs Spatially Informed)</li> </ol> In\u00a0[\u00a0]: Copied! <pre># 1) Generate points\npoints=generate_random_points(7) # Generate Stratified random points. 7*7 = 49\n\n#print(points)\n</pre> # 1) Generate points points=generate_random_points(7) # Generate Stratified random points. 7*7 = 49  #print(points) In\u00a0[\u00a0]: Copied! <pre># 2) Calculate Standard Distance Matrix\ndistance_matrix=calculate_distance_matrix(points)\ndistance_matrix\n</pre> # 2) Calculate Standard Distance Matrix distance_matrix=calculate_distance_matrix(points) distance_matrix In\u00a0[\u00a0]: Copied! <pre># 3) Calculate Distance Matrix with the concept of adjacency : by using Voronoi concept and K-NN concept\nVoronoi_distance, voronoi_polygon = voronoi_adjacency_distance(points)\nKNN_distance = knn_adjacency_distance(points, k=7)\ncombined_distance = combine_distance_matrices(Voronoi_distance, KNN_distance) # Combine the two distance matrices\n\n# Print the distance matrices\nprint(Voronoi_distance)\nprint(KNN_distance)\nprint(combined_distance)\n</pre> # 3) Calculate Distance Matrix with the concept of adjacency : by using Voronoi concept and K-NN concept Voronoi_distance, voronoi_polygon = voronoi_adjacency_distance(points) KNN_distance = knn_adjacency_distance(points, k=7) combined_distance = combine_distance_matrices(Voronoi_distance, KNN_distance) # Combine the two distance matrices  # Print the distance matrices print(Voronoi_distance) print(KNN_distance) print(combined_distance) In\u00a0[\u00a0]: Copied! <pre># Export shp files\npath = 'D:/GIS program/Github/spatialtsp/spatialtsp-5'\npoints.to_file('{}/final_work/03_LPFiles/test.shp'.format(path), encoding='utf-8')\nvoronoi_polygon.to_file('{}/final_work/03_LPFiles/test_polygon.shp'.format(path), encoding='utf-8')\n</pre> # Export shp files path = 'D:/GIS program/Github/spatialtsp/spatialtsp-5' points.to_file('{}/final_work/03_LPFiles/test.shp'.format(path), encoding='utf-8') voronoi_polygon.to_file('{}/final_work/03_LPFiles/test_polygon.shp'.format(path), encoding='utf-8') <p>2-1. Make LP files</p> In\u00a0[\u00a0]: Copied! <pre># Standard version\nlp_model = generate_lp_model(distance_matrix)\n# Spatially Informed version\nlp_model_2 = generate_lp_model(combined_distance)\n\nprint(lp_model)\nprint(lp_model_2)\n</pre> # Standard version lp_model = generate_lp_model(distance_matrix) # Spatially Informed version lp_model_2 = generate_lp_model(combined_distance)  print(lp_model) print(lp_model_2) <p>2-2. Write the LP file</p> In\u00a0[\u00a0]: Copied! <pre># Standard version\nfile_path = f\"{path}/final_work/03_LPFiles/TSP_test.lp\" \nwith open(file_path, 'w') as file:\n    file.write(lp_model)\nprint(f\"LP file saved to {file_path}\")\n\n# Spatially Informed version\nfile_path = f\"{path}/final_work/03_LPFiles/TSP_test_2.lp\" \nwith open(file_path, 'w') as file:\n    file.write(lp_model_2)\nprint(f\"LP file saved to {file_path}\")\n</pre> # Standard version file_path = f\"{path}/final_work/03_LPFiles/TSP_test.lp\"  with open(file_path, 'w') as file:     file.write(lp_model) print(f\"LP file saved to {file_path}\")  # Spatially Informed version file_path = f\"{path}/final_work/03_LPFiles/TSP_test_2.lp\"  with open(file_path, 'w') as file:     file.write(lp_model_2) print(f\"LP file saved to {file_path}\") In\u00a0[\u00a0]: Copied! <pre># Import the package\nimport subprocess\nimport pandas as pd\n</pre> # Import the package import subprocess import pandas as pd <p>Standard TSP</p> In\u00a0[\u00a0]: Copied! <pre># Define the path to the LP file\nlp_file_path = f'\"{path}/final_work/03_LPFiles/TSP_test.lp\"'\n\n# Initialize lists to store results\nobjval_ls = []\nnodenb_ls = []\ntimenb_ls = []\niternb_ls = []\ndettime_ls = []\n\n# Run CPLEX\ncommand = [\n    'D:/GIS program/cplex_2018-20230804T132516Z-003/cplex/bin/x64_win64/cplex.exe', '-c',\n    f'read {lp_file_path}',\n    'set threads 2',\n    'set timelimit 3600',\n    'opt', \n    'display solution variables -'\n]\ntry:\n    r = subprocess.run(command, capture_output=True, text=True, check=True)\n    print(\"STDOUT:\", r.stdout)\n    print(\"STDERR:\", r.stderr)\nexcept subprocess.CalledProcessError as e:\n    print(\"Error:\", e)\n    print(\"STDERR:\", e.stderr)\n\n# Get the attributes by running CPLEX\nresult = r.stdout\ntimenb, iternb, nodenb, objval, dettime, variables = get_attributes_cplex(result)\nprint(f\"Objective: {objval}, Solution Time: {timenb}, Iterations: {iternb}, Nodes: {nodenb}, Dettime: {dettime}\")\nprint(\"Variables:\", variables)\n\n# Append the results to the lists\nobjval_ls.append(objval)  \ntimenb_ls.append(timenb)  \niternb_ls.append(iternb)  \nnodenb_ls.append(nodenb) \ndettime_ls.append(dettime) \n\nloc_dict = {\n    'ObjVal': objval_ls, \n    'Nodenb': nodenb_ls, \n    'Timenb': timenb_ls, \n    'Iternb': iternb_ls, \n    'Dettime': dettime_ls,\n    'Variables': [variables]\n     #'Geogetry' : geometry_ls\n\n}\ndf_1 = pd.DataFrame(loc_dict)\n\ndf_1\n</pre> # Define the path to the LP file lp_file_path = f'\"{path}/final_work/03_LPFiles/TSP_test.lp\"'  # Initialize lists to store results objval_ls = [] nodenb_ls = [] timenb_ls = [] iternb_ls = [] dettime_ls = []  # Run CPLEX command = [     'D:/GIS program/cplex_2018-20230804T132516Z-003/cplex/bin/x64_win64/cplex.exe', '-c',     f'read {lp_file_path}',     'set threads 2',     'set timelimit 3600',     'opt',      'display solution variables -' ] try:     r = subprocess.run(command, capture_output=True, text=True, check=True)     print(\"STDOUT:\", r.stdout)     print(\"STDERR:\", r.stderr) except subprocess.CalledProcessError as e:     print(\"Error:\", e)     print(\"STDERR:\", e.stderr)  # Get the attributes by running CPLEX result = r.stdout timenb, iternb, nodenb, objval, dettime, variables = get_attributes_cplex(result) print(f\"Objective: {objval}, Solution Time: {timenb}, Iterations: {iternb}, Nodes: {nodenb}, Dettime: {dettime}\") print(\"Variables:\", variables)  # Append the results to the lists objval_ls.append(objval)   timenb_ls.append(timenb)   iternb_ls.append(iternb)   nodenb_ls.append(nodenb)  dettime_ls.append(dettime)   loc_dict = {     'ObjVal': objval_ls,      'Nodenb': nodenb_ls,      'Timenb': timenb_ls,      'Iternb': iternb_ls,      'Dettime': dettime_ls,     'Variables': [variables]      #'Geogetry' : geometry_ls  } df_1 = pd.DataFrame(loc_dict)  df_1 <p>Spatially Informed TSP</p> In\u00a0[\u00a0]: Copied! <pre>import subprocess\nimport pandas as pd\n\nlp_file_path_2 = f'\"{path}/final_work/03_LPFiles/TSP_test_2.lp\"'\n\n# Initialize lists to store results\nobjval_ls = []\nnodenb_ls = []\ntimenb_ls = []\niternb_ls = []\ndettime_ls = []\n\n# Run CPLEX\ncommand = [\n    'D:/GIS program/cplex_2018-20230804T132516Z-003/cplex/bin/x64_win64/cplex.exe', '-c',\n    f'read {lp_file_path_2}',\n    'set threads 2',\n    'set timelimit 3600',\n    'opt',\n    'display solution variables -'\n]\ntry:\n    r = subprocess.run(command, capture_output=True, text=True, check=True)\n    print(\"STDOUT:\", r.stdout)\n    print(\"STDERR:\", r.stderr)\nexcept subprocess.CalledProcessError as e:\n    print(\"Error:\", e)\n    print(\"STDERR:\", e.stderr)\n\n# Get the attributes by running CPLEX\nresult = r.stdout\ntimenb, iternb, nodenb, objval, dettime, variables = get_attributes_cplex(result)\nprint(f\"Objective: {objval}, Solution Time: {timenb}, Iterations: {iternb}, Nodes: {nodenb}, Dettime: {dettime}\")\nprint(\"Variables:\", variables)\n\n# Append the results to the lists\nobjval_ls.append(objval)  \ntimenb_ls.append(timenb)  \niternb_ls.append(iternb)  \nnodenb_ls.append(nodenb) \ndettime_ls.append(dettime) \n\nloc_dict = {\n    'ObjVal': objval_ls, \n    'Nodenb': nodenb_ls, \n    'Timenb': timenb_ls, \n    'Iternb': iternb_ls, \n    'Dettime': dettime_ls,\n    'Variables': [variables]\n     #'Geogetry' : geometry_ls\n}\ndf_2 = pd.DataFrame(loc_dict)\n\ndf_2\n</pre> import subprocess import pandas as pd  lp_file_path_2 = f'\"{path}/final_work/03_LPFiles/TSP_test_2.lp\"'  # Initialize lists to store results objval_ls = [] nodenb_ls = [] timenb_ls = [] iternb_ls = [] dettime_ls = []  # Run CPLEX command = [     'D:/GIS program/cplex_2018-20230804T132516Z-003/cplex/bin/x64_win64/cplex.exe', '-c',     f'read {lp_file_path_2}',     'set threads 2',     'set timelimit 3600',     'opt',     'display solution variables -' ] try:     r = subprocess.run(command, capture_output=True, text=True, check=True)     print(\"STDOUT:\", r.stdout)     print(\"STDERR:\", r.stderr) except subprocess.CalledProcessError as e:     print(\"Error:\", e)     print(\"STDERR:\", e.stderr)  # Get the attributes by running CPLEX result = r.stdout timenb, iternb, nodenb, objval, dettime, variables = get_attributes_cplex(result) print(f\"Objective: {objval}, Solution Time: {timenb}, Iterations: {iternb}, Nodes: {nodenb}, Dettime: {dettime}\") print(\"Variables:\", variables)  # Append the results to the lists objval_ls.append(objval)   timenb_ls.append(timenb)   iternb_ls.append(iternb)   nodenb_ls.append(nodenb)  dettime_ls.append(dettime)   loc_dict = {     'ObjVal': objval_ls,      'Nodenb': nodenb_ls,      'Timenb': timenb_ls,      'Iternb': iternb_ls,      'Dettime': dettime_ls,     'Variables': [variables]      #'Geogetry' : geometry_ls } df_2 = pd.DataFrame(loc_dict)  df_2 <p>Visualize the results</p> In\u00a0[\u00a0]: Copied! <pre>import geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom shapely.geometry import LineString\n</pre> import geopandas as gpd import matplotlib.pyplot as plt from shapely.geometry import LineString In\u00a0[\u00a0]: Copied! <pre># Extract the order of tour\n# 'variables' means the order of the nodes for tour\ntour_order = [(int(k.split('_')[1]), int(k.split('_')[2])) for k, v in variables.items() if v == 1.0]\nprint(tour_order)\n</pre> # Extract the order of tour # 'variables' means the order of the nodes for tour tour_order = [(int(k.split('_')[1]), int(k.split('_')[2])) for k, v in variables.items() if v == 1.0] print(tour_order) In\u00a0[\u00a0]: Copied! <pre># Read the shapefiles(points and polygons) for visualization\npolygon_path = \"D:\\\\GIS program\\\\Github\\\\spatialtsp\\\\spatialtsp-5\\\\final_work\\\\03_LPFiles\\\\test_polygon.shp\"\npoint_path = \"D:\\\\GIS program\\\\Github\\\\spatialtsp\\\\spatialtsp-5\\\\final_work\\\\03_LPFiles\\\\test.shp\"\ngdf_points = gpd.read_file(point_path)\ngdf_polygons = gpd.read_file(polygon_path)\n</pre> # Read the shapefiles(points and polygons) for visualization polygon_path = \"D:\\\\GIS program\\\\Github\\\\spatialtsp\\\\spatialtsp-5\\\\final_work\\\\03_LPFiles\\\\test_polygon.shp\" point_path = \"D:\\\\GIS program\\\\Github\\\\spatialtsp\\\\spatialtsp-5\\\\final_work\\\\03_LPFiles\\\\test.shp\" gdf_points = gpd.read_file(point_path) gdf_polygons = gpd.read_file(polygon_path) In\u00a0[\u00a0]: Copied! <pre>def find_point(fid):\n    try:\n        point = gdf_points[gdf_points['FID'] == fid-1].geometry.iloc[0]\n        return point\n    except IndexError:\n        raise ValueError(f\"No geometry found for FID {fid}. Check if the FID is correct and present in gdf_points.\")\n\n# Generate lines for the tour\nlines = [LineString([find_point(start), find_point(end)]) for start, end in tour_order]\n\n# # Create a GeoDataFrame for the lines\ngdf_lines = gpd.GeoDataFrame(geometry=lines, crs=gdf_points.crs)\n\n# Plot\nfig, ax = plt.subplots(figsize=(12, 10))\ngdf_polygons.plot(ax=ax, color='lightgrey', edgecolor='black', alpha=0.1)\ngdf_points.plot(ax=ax, marker='o', color='blue', markersize=5)\ngdf_lines.plot(ax=ax, linewidth=1.5, color='red')\n\n# Adding labels\nfor Input_FID, row in gdf_points.iterrows():\n    ax.annotate(text=Input_FID+1, xy=(row.geometry.x, row.geometry.y),\n                xytext=(3, 3), textcoords=\"offset points\", color='black')\n\nax.set_title('TSP Solution')\nax.set_xlabel('Longitude')\nax.set_ylabel('Latitude')\n\nplt.show()\n</pre> def find_point(fid):     try:         point = gdf_points[gdf_points['FID'] == fid-1].geometry.iloc[0]         return point     except IndexError:         raise ValueError(f\"No geometry found for FID {fid}. Check if the FID is correct and present in gdf_points.\")  # Generate lines for the tour lines = [LineString([find_point(start), find_point(end)]) for start, end in tour_order]  # # Create a GeoDataFrame for the lines gdf_lines = gpd.GeoDataFrame(geometry=lines, crs=gdf_points.crs)  # Plot fig, ax = plt.subplots(figsize=(12, 10)) gdf_polygons.plot(ax=ax, color='lightgrey', edgecolor='black', alpha=0.1) gdf_points.plot(ax=ax, marker='o', color='blue', markersize=5) gdf_lines.plot(ax=ax, linewidth=1.5, color='red')  # Adding labels for Input_FID, row in gdf_points.iterrows():     ax.annotate(text=Input_FID+1, xy=(row.geometry.x, row.geometry.y),                 xytext=(3, 3), textcoords=\"offset points\", color='black')  ax.set_title('TSP Solution') ax.set_xlabel('Longitude') ax.set_ylabel('Latitude')  plt.show() In\u00a0[\u00a0]: Copied! <pre># Import the package\nimport numpy as np\nimport geopandas as gpd\n</pre> # Import the package import numpy as np import geopandas as gpd In\u00a0[\u00a0]: Copied! <pre># Read the shapefiles\n# polygon_path = \"C:\\\\Users\\\\dooco\\\\OneDrive\\\\spatial data\\\\US_Data\\\\TSP_dataset\\\\SpatialData\\\\Capitals_Voronoi_clipped.shp\"\n# point_path = \"C:\\\\Users\\\\dooco\\\\OneDrive\\\\spatial data\\\\US_Data\\\\TSP_dataset\\\\SpatialData\\\\Capitals_Points.shp\"\n\n# US_points = gpd.read_file(point_path)\n# #US_points = np.array(list(gdf_points.geometry.apply(lambda geom: (geom.x, geom.y))))\n</pre> # Read the shapefiles # polygon_path = \"C:\\\\Users\\\\dooco\\\\OneDrive\\\\spatial data\\\\US_Data\\\\TSP_dataset\\\\SpatialData\\\\Capitals_Voronoi_clipped.shp\" # point_path = \"C:\\\\Users\\\\dooco\\\\OneDrive\\\\spatial data\\\\US_Data\\\\TSP_dataset\\\\SpatialData\\\\Capitals_Points.shp\"  # US_points = gpd.read_file(point_path) # #US_points = np.array(list(gdf_points.geometry.apply(lambda geom: (geom.x, geom.y)))) In\u00a0[\u00a0]: Copied! <pre># Calculate the distance matrix\n# distance_matrix=calculate_distance_matrix(US_points)\n# distance_matrix\n</pre> # Calculate the distance matrix # distance_matrix=calculate_distance_matrix(US_points) # distance_matrix In\u00a0[\u00a0]: Copied! <pre># Calculate the distance matrix with the concept of adjacency\n# Voronoi_distance = voronoi_adjacency_distance(US_points)\n# KNN_distance = knn_adjacency_distance(US_points, k=7)\n# combined_distance = combine_distance_matrices(Voronoi_distance, KNN_distance)\n# combined_distance\n</pre> # Calculate the distance matrix with the concept of adjacency # Voronoi_distance = voronoi_adjacency_distance(US_points) # KNN_distance = knn_adjacency_distance(US_points, k=7) # combined_distance = combine_distance_matrices(Voronoi_distance, KNN_distance) # combined_distance In\u00a0[\u00a0]: Copied! <pre># set working directory\n# import os\n\n# path = 'D:/GIS_analyzing/1.Standard_TSP/0.test_iteration' # write your own directory\n# os.chdir(path)\n# os.getcwd()\n</pre> # set working directory # import os  # path = 'D:/GIS_analyzing/1.Standard_TSP/0.test_iteration' # write your own directory # os.chdir(path) # os.getcwd() In\u00a0[\u00a0]: Copied! <pre>## other codes will be updated soon\n</pre> ## other codes will be updated soon In\u00a0[\u00a0]: Copied! <pre>## Add basemap\nfrom spatialtsp import Map\n\nmy_map = Map(center=[40.7128, -74.0060], zoom=10)\nmy_map.add_basemap(\"OpenStreetMap.Mapnik\")\n\nmy_map\n</pre> ## Add basemap from spatialtsp import Map  my_map = Map(center=[40.7128, -74.0060], zoom=10) my_map.add_basemap(\"OpenStreetMap.Mapnik\")  my_map  In\u00a0[\u00a0]: Copied! <pre>## Add GeoJSON\nfrom spatialtsp import Map\n\ngeojson_map = Map(center=[37.0902, -95.7129], zoom=4)\ngeojson_url = \"https://github.com/opengeos/datasets/releases/download/us/us_states.geojson\"\ngeojson_map.add_geojson(geojson_url, name=\"US Counties\")\n\ngeojson_map\n</pre> ## Add GeoJSON from spatialtsp import Map  geojson_map = Map(center=[37.0902, -95.7129], zoom=4) geojson_url = \"https://github.com/opengeos/datasets/releases/download/us/us_states.geojson\" geojson_map.add_geojson(geojson_url, name=\"US Counties\")  geojson_map  In\u00a0[\u00a0]: Copied! <pre>## Add shp\nimport geopandas as gpd\nimport requests\nimport zipfile\nimport io\nfrom spatialtsp import Map\n\n# Shapefile URL\nurl = 'https://github.com/opengeos/datasets/releases/download/us/us_states.zip'\n\n# Download and extract the zip file\nr = requests.get(url)\nz = zipfile.ZipFile(io.BytesIO(r.content))\n\n# Find the shapefile name\nshp_name = [name for name in z.namelist() if '.shp' in name][0]\n\n# Read and extract the shapefile\nz.extractall(\"temp_shp\")\nstates_gdf = gpd.read_file(\"temp_shp/us_states.shp\")\n\n\n# Display the shapefile\nmy_map = Map(center=[37.0902, -95.7129], zoom=4)\nmy_map.add_vector(states_gdf, name=\"US States\")\n\nmy_map\n</pre> ## Add shp import geopandas as gpd import requests import zipfile import io from spatialtsp import Map  # Shapefile URL url = 'https://github.com/opengeos/datasets/releases/download/us/us_states.zip'  # Download and extract the zip file r = requests.get(url) z = zipfile.ZipFile(io.BytesIO(r.content))  # Find the shapefile name shp_name = [name for name in z.namelist() if '.shp' in name][0]  # Read and extract the shapefile z.extractall(\"temp_shp\") states_gdf = gpd.read_file(\"temp_shp/us_states.shp\")   # Display the shapefile my_map = Map(center=[37.0902, -95.7129], zoom=4) my_map.add_vector(states_gdf, name=\"US States\")  my_map  In\u00a0[\u00a0]: Copied! <pre>## Add Vector\nfrom spatialtsp import Map\n\n# Initialize the map\nmy_map = Map(center=[37.0902, -95.7129], zoom=4)\n\n# GeoJSON URLs\ncity_geojson_url = \"https://github.com/opengeos/datasets/releases/download/us/us_cities.geojson\"\ncounty_geojson_url = \"https://github.com/opengeos/datasets/releases/download/us/us_counties.geojson\"\n\n# Shapefile URL\nstates_shape_url = 'https://github.com/opengeos/datasets/releases/download/us/us_states.zip'\n\n# Load GeoJSONs as GeoDataFrames\ngdf_cities = gpd.read_file(city_geojson_url)\ngdf_counties = gpd.read_file(county_geojson_url)\n\n# Use add_vector to add GeoDataFrames to the map\nmy_map.add_vector(gdf_counties, name=\"US Counties\")\nmy_map.add_vector(gdf_cities, name=\"US Cities\")\n# For the shapefile, directly use the URL\nmy_map.add_vector(states_shape_url, name=\"US States\")\n\n# Display the map\nmy_map\n</pre> ## Add Vector from spatialtsp import Map  # Initialize the map my_map = Map(center=[37.0902, -95.7129], zoom=4)  # GeoJSON URLs city_geojson_url = \"https://github.com/opengeos/datasets/releases/download/us/us_cities.geojson\" county_geojson_url = \"https://github.com/opengeos/datasets/releases/download/us/us_counties.geojson\"  # Shapefile URL states_shape_url = 'https://github.com/opengeos/datasets/releases/download/us/us_states.zip'  # Load GeoJSONs as GeoDataFrames gdf_cities = gpd.read_file(city_geojson_url) gdf_counties = gpd.read_file(county_geojson_url)  # Use add_vector to add GeoDataFrames to the map my_map.add_vector(gdf_counties, name=\"US Counties\") my_map.add_vector(gdf_cities, name=\"US Cities\") # For the shapefile, directly use the URL my_map.add_vector(states_shape_url, name=\"US States\")  # Display the map my_map In\u00a0[\u00a0]: Copied! <pre>#change path\nimport os\nos.chdir('D:/GIS program/Github/spatialtsp/spatialtsp-5')\n</pre> #change path import os os.chdir('D:/GIS program/Github/spatialtsp/spatialtsp-5') In\u00a0[\u00a0]: Copied! <pre># import functions\n!pip install localtileserver\nimport spatialtsp\nfrom spatialtsp import Map\n</pre> # import functions !pip install localtileserver import spatialtsp from spatialtsp import Map In\u00a0[\u00a0]: Copied! <pre># check the path of functions\nfrom importlib import reload\nreload(spatialtsp)\n\nfrom spatialtsp import Map\nm = Map()\nprint(dir(m)) \n\nimport spatialtsp\nprint(spatialtsp.__file__)\n</pre> # check the path of functions from importlib import reload reload(spatialtsp)  from spatialtsp import Map m = Map() print(dir(m))   import spatialtsp print(spatialtsp.__file__) In\u00a0[\u00a0]: Copied! <pre>## overlay climate image(png)\nfrom ipyleaflet import Map, ImageOverlay\n\nm = Map(center=(25, -115), zoom=4)\n\nimage = ImageOverlay(\n    url=\"https://i.imgur.com/06Q1fSz.png\",\n    # url='../06Q1fSz.png',\n    bounds=((13, -130), (32, -100)),\n)\n\nm.add(image)\nm\n</pre> ## overlay climate image(png) from ipyleaflet import Map, ImageOverlay  m = Map(center=(25, -115), zoom=4)  image = ImageOverlay(     url=\"https://i.imgur.com/06Q1fSz.png\",     # url='../06Q1fSz.png',     bounds=((13, -130), (32, -100)), )  m.add(image) m In\u00a0[\u00a0]: Copied! <pre>## Overlay GIF of TSP into basemap\nm = Map(center=(40, -100), zoom=4)\n\nurl = \"https://graphdeeplearning.github.io/project/combinatorial-optimization/tsp-gif.gif\"\n\n# url='../06Q1fSz.png',\nbounds = ((25, -125), (51, -66))\nm.add_image(url, bounds)\nm.add_layers_control()\n# m.scroll_wheel_zoom = True\nm\n</pre> ## Overlay GIF of TSP into basemap m = Map(center=(40, -100), zoom=4)  url = \"https://graphdeeplearning.github.io/project/combinatorial-optimization/tsp-gif.gif\"  # url='../06Q1fSz.png', bounds = ((25, -125), (51, -66)) m.add_image(url, bounds) m.add_layers_control() # m.scroll_wheel_zoom = True m In\u00a0[\u00a0]: Copied! <pre>## Overlay COloud Optimized GeoTiff into Basemap\nfrom localtileserver import TileClient, get_leaflet_tile_layer, examples\nfrom spatialtsp import Map\n\nclient = TileClient(\n    \"https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif\"\n)\n\n# Create ipyleaflet TileLayer from that server\nt = get_leaflet_tile_layer(client)\n# Create ipyleaflet map, add tile layer, and display\nm = Map()\nm.add(t)\nm.center = client.center()\nm.zoom = client.default_zoom\nm\n</pre> ## Overlay COloud Optimized GeoTiff into Basemap from localtileserver import TileClient, get_leaflet_tile_layer, examples from spatialtsp import Map  client = TileClient(     \"https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif\" )  # Create ipyleaflet TileLayer from that server t = get_leaflet_tile_layer(client) # Create ipyleaflet map, add tile layer, and display m = Map() m.add(t) m.center = client.center() m.zoom = client.default_zoom m"},{"location":"examples/spatialtsp/#spatially-informed-traveling-salesman-problem","title":"Spatially Informed Traveling Salesman Problem\u00b6","text":"<p> Developed by Wanhee Kim(Phd student at UTK) / Revised Date : 05/03/2024</p>"},{"location":"examples/spatialtsp/#sequence-of-spatially-informed-tsp","title":"Sequence of spatially informed TSP\u00b6","text":"<ol> <li>Pre-setting for the Analysis</li> <li>Generate distance matrix regarding on Spatial adjacency</li> <li>Generate LP Model for Analyzing TSP</li> <li>Analyze by using CPLEX(Solving machine)</li> </ol>"},{"location":"examples/spatialtsp/#analysis","title":"Analysis\u00b6","text":""},{"location":"examples/spatialtsp/#test-in-toy-data","title":"Test in Toy Data\u00b6","text":""},{"location":"examples/spatialtsp/#2-generate-lp-model","title":"2. Generate LP Model\u00b6","text":""},{"location":"examples/spatialtsp/#3-run-lp-model","title":"3. Run LP Model\u00b6","text":""},{"location":"examples/spatialtsp/#application-into-48-capitals-of-us","title":"Application into 48 Capitals of US\u00b6","text":""},{"location":"examples/spatialtsp/#display-basemap","title":"Display Basemap\u00b6","text":""},{"location":"examples/spatialtsp/#raster-map","title":"Raster Map\u00b6","text":""}]}